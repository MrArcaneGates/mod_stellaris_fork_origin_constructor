namespace = origin

country_event = {
	id = origin.20
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		every_playable_country = {
			limit = {
				is_origin_scion = yes
				root = { is_overlord_to = prev }
				any_agreement = {
					agreement_preset = preset_scion
				}
			}
			random_list = {

				# Technologies
				50 = {
					modifier = {
						factor = 0
						scion_has_techs = yes
					}
					random_list = {
						33 = {
							modifier = {
								factor = 0
								OR = {
									has_technology = tech_alloys_1
									NOT = { can_research_technology = tech_alloys_1 }
								}
								OR = {
									has_technology = tech_mineral_purification_2
									NOT = { can_research_technology = tech_mineral_purification_2 }
								}
								OR = {
									has_technology = tech_space_defense_station_improvement
									NOT = { can_research_technology = tech_space_defense_station_improvement }
								}
								OR = {
									has_technology = tech_battleships
									NOT = { can_research_technology = tech_battleships }
								}
								OR = {
									has_technology = tech_titan_hull_1
									NOT = { can_research_technology = tech_titan_hull_1 }
								}
							}
							country_event = { id = origin.21 }
						}
						33 = {
							modifier = {
								factor = 0
								OR = {
									has_technology = tech_space_science_2
									NOT = { can_research_technology = tech_space_science_2 }
								}
								OR = {
									has_technology = tech_self_aware_logic
									NOT = { can_research_technology = tech_self_aware_logic }
								}
								OR = {
									has_technology = tech_antimatter_power
									NOT = { can_research_technology = tech_antimatter_power }
								}
								OR = {
									has_technology = tech_combat_computers_autonomous
									NOT = { can_research_technology = tech_combat_computers_autonomous }
								}
								OR = {
									has_technology = tech_jump_drive_1
									NOT = { can_research_technology = tech_jump_drive_1 }
								}
							}
							country_event = { id = origin.22 }
						}
						33 = {
							modifier = {
								factor = 0
								OR = {
									has_technology = tech_eco_simulation
									NOT = { can_research_technology = tech_eco_simulation }
								}
								OR = {
									has_technology = tech_society_2
									NOT = { can_research_technology = tech_society_2 }
								}
								OR = {
									has_technology = tech_colonization_4
									NOT = { can_research_technology = tech_colonization_4 }
								}
								OR = {
									has_technology = tech_climate_restoration
									NOT = { can_research_technology = tech_climate_restoration }
								}
								OR = {
									has_technology = tech_ascension_theory
									NOT = { can_research_technology = tech_ascension_theory }
								}
							}
							country_event = { id = origin.23 }
						}
					}
				}

				# Resources
				50 = {
					country_event = { id = origin.24 }
				}
			}
		}
		# Repeat
		country_event = { id = origin.20 days = 9000 random = 9000 }
	}
}
country_event = {
	id = origin.55
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		set_country_flag = first_contact_event
		set_country_flag = Story2 # Already encountered spacefarers
		add_tradition = tr_diplomacy_adopt
		add_tradition = tr_diplomacy_the_federation

		# Choose member capitals from amongst guaranteed habitable planets
		if = {
			limit = { num_guaranteed_colonies >= 2 }
			capital_scope = {
				solar_system = {
					closest_system = {
						limit = { has_star_flag = neighbor_t1_first_colony }
						random_system_planet = {
							limit = { has_planet_flag = prescripted_ideal }
							save_event_target_as = fed_planet_1
							federation_origin_planet_setup = yes
						}
					}
					closest_system = {
						limit = { has_star_flag = neighbor_t2_second_colony }
						random_system_planet = {
							limit = { has_planet_flag = prescripted_ideal }
							save_event_target_as = fed_planet_2
							federation_origin_planet_setup = yes
						}
					}
				}
			}
		}
		if = {
			limit = { num_guaranteed_colonies >= 1 }
			capital_scope = {
				solar_system = {
					closest_system = {
						limit = { has_star_flag = neighbor_t1_first_colony }
						random_system_planet = {
							limit = { has_planet_flag = prescripted_ideal }
							save_event_target_as = fed_planet_1
							federation_origin_planet_setup = yes
						}
					}
					closest_system = {
						limit = {
							NOT = { has_star_flag = neighbor_t1_first_colony }
							has_owner = no
							any_system_planet = {
								is_ringworld = no
								is_asteroid = no
								is_star = no
								is_moon = no
							}
						}
						if = {
							limit = {
								any_system_planet = { habitable_planet = yes }
							}
							random_system_planet = {
								limit = { habitable_planet = yes }
								save_event_target_as = fed_planet_2
								set_planet_size = 16
							}
						}
						else = {
							random_system_planet = {
								limit = {
									is_ringworld = no
									is_asteroid = no
									is_star = no
									is_moon = no
								}
								save_event_target_as = fed_planet_2
								federation_origin_planet_setup = yes
							}
						}
					}
				}
			}
		}
		if = {
			limit = { num_guaranteed_colonies = 0 }
			capital_scope = {
				solar_system = {
					closest_system = {
						limit = { has_owner = no }
						set_star_flag = fed_origin_system_1
						if = {
							limit = {
								any_system_planet = { habitable_planet = yes }
							}
							random_system_planet = {
								limit = { habitable_planet = yes }
								save_event_target_as = fed_planet_1
								set_planet_size = 16
							}
						}
						else = {
							random_system_planet = {
								limit = {
									is_ringworld = no
									is_asteroid = no
									is_star = no
									is_moon = no
								}
								save_event_target_as = fed_planet_1
								federation_origin_planet_setup = yes
							}
						}
					}
					closest_system = {
						limit = {
							NOT = { has_star_flag = fed_origin_system_1 }
							has_owner = no
							any_system_planet = {
								is_ringworld = no
								is_asteroid = no
								is_star = no
								is_moon = no
							}
						}
						if = {
							limit = {
								any_system_planet = { habitable_planet = yes }
							}
							random_system_planet = {
								limit = { habitable_planet = yes }
								save_event_target_as = fed_planet_2
								set_planet_size = 16
							}
						}
						else = {
							random_system_planet = {
								limit = {
									is_ringworld = no
									is_asteroid = no
									is_star = no
									is_moon = no
								}
								save_event_target_as = fed_planet_2
								federation_origin_planet_setup = yes
							}
						}
					}
				}
			}
		}

		# Create first member
		event_target:fed_planet_1 = {
			solar_system = { generate_home_system_resources = yes }
			create_species = {
				name = random
				class = random_non_machine
				portrait = random
				traits = random
				homeworld = this
				effect = {
					save_event_target_as = fed_planet_1_species
				}
			}
			# Common Ground
			if = {
				limit = {
					root = { is_origin_common_ground = yes }
				}
				create_common_ground_member = { NUM = 1 }
			}
			# Hegemon
			if = {
				limit = {
					root = {
						is_origin_hegemon = yes
					}
				}
				create_hegemon_member = {
					NUM = 1
				}
			}
			create_colony = {
				owner = event_target:fed_member_1
			}
			generate_start_deposits_and_blockers = yes
			generate_start_buildings_and_districts = yes
			generate_start_pops = yes
			event_target:fed_member_1 = { give_starting_resources_effect = yes }
			solar_system = {
				create_starbase = {
					size = starbase_starport
					module = shipyard
					building = crew_quarters
					owner = event_target:fed_member_1
					effect = {
						set_starbase_module = {
							slot = 1
							module = trading_hub
						}
						set_starbase_module = {
							slot = 2
							module = shipyard
						}
					}
				}
			}
		}

		# Create second member
		event_target:fed_planet_2 = {
			solar_system = { generate_home_system_resources = yes }
			create_species = {
				name = random
				class = random_non_machine
				portrait = random
				traits = random
				homeworld = this
				effect = {
					save_event_target_as = fed_planet_2_species
				}
			}
			# Common Ground
			if = {
				limit = {
					root = { is_origin_common_ground = yes }
				}
				create_common_ground_member = { NUM = 2 }
			}
			# Hegemon
			if = {
				limit = {
					root = {
						is_origin_hegemon = yes
					}
				}
				create_hegemon_member = {
					NUM = 2
				}
			}
			create_colony = {
				owner = event_target:fed_member_2
			}
			generate_start_deposits_and_blockers = yes
			generate_start_buildings_and_districts = yes
			generate_start_pops = yes
			event_target:fed_member_2 = { give_starting_resources_effect = yes }
			solar_system = {
				create_starbase = {
					size = starbase_starport
					module = shipyard
					building = crew_quarters
					owner = event_target:fed_member_2
					effect = {
						set_starbase_module = {
							slot = 1
							module = trading_hub
						}
						set_starbase_module = {
							slot = 2
							module = shipyard
						}
					}
				}
			}
		}

		# Finish setting up member empires
		event_target:fed_member_1 = {
			create_starting_leaders = yes
			country_event = { id = game_start.9 } # create starter set of ships
			country_event = { id = game_start.33 days = 1 } # needs delay for system ownership to settle
			join_alliance = {
				who = root
				override_requirements = yes
			}
			set_name = random # Fixes some naming issues
		}
		event_target:fed_member_2 = {
			create_starting_leaders = yes
			country_event = { id = game_start.9 }
			country_event = { id = game_start.33 days = 1 } # needs delay for system ownership to settle
			join_alliance = {
				who = root
				override_requirements = yes
			}
			set_name = random # Fixes some naming issues
		}

		# Set Intel levels, Opinion, and Federation laws
		if = {
			limit = { is_origin_common_ground = yes }
			event_target:fed_member_1 = {
				add_opinion_modifier = {
					who = root
					modifier = opinion_common_ground
				}
				add_trust = {
					amount = 50
					who = root
				}
				add_trust = {
					amount = 50
					who = event_target:fed_member_2
				}
				add_intel = {
					amount = 60
					who = root
				}
				add_intel = {
					amount = 60
					who = event_target:fed_member_2
				}
			}
			event_target:fed_member_2 = {
				add_opinion_modifier = {
					who = root
					modifier = opinion_common_ground
				}
				add_trust = {
					amount = 50
					who = root
				}
				add_trust = {
					amount = 50
					who = event_target:fed_member_1
				}
				add_intel = {
					amount = 60
					who = root
				}
				add_intel = {
					amount = 60
					who = event_target:fed_member_1
				}
			}
			add_opinion_modifier = {
				who = event_target:fed_member_1
				modifier = opinion_common_ground
			}
			add_opinion_modifier = {
				who = event_target:fed_member_2
				modifier = opinion_common_ground
			}
			add_trust = {
				amount = 50
				who = event_target:fed_member_1
			}
			add_trust = {
				amount = 50
				who = event_target:fed_member_2
			}
			add_intel = {
				amount = 60
				who = event_target:fed_member_1
			}
			add_intel = {
				amount = 60
				who = event_target:fed_member_2
			}
			set_federation_leader = root
			country_event = { id = origin.57 days = 2 }
		}
		if = {
			limit = { is_origin_hegemon = yes }
			federation = {
				set_federation_type = hegemony_federation
				set_federation_leader = root
				set_name = random
				set_federation_law = succession_term_years_20
			}
			event_target:fed_member_1 = {
				add_intel = {
					amount = 40
					who = root
				}
				add_intel = {
					amount = 40
					who = event_target:fed_member_2
				}
				set_closed_borders = {
					who = root
					status = no
				}
				set_closed_borders = {
					who = event_target:fed_member_2
					status = no
				}
			}
			event_target:fed_member_2 = {
				add_intel = {
					amount = 40
					who = root
				}
				add_intel = {
					amount = 40
					who = event_target:fed_member_1
				}
				set_closed_borders = {
					who = root
					status = no
				}
				set_closed_borders = {
					who = event_target:fed_member_1
					status = no
				}
			}
			add_intel = {
				amount = 40
				who = event_target:fed_member_1
			}
			set_closed_borders = {
				who = event_target:fed_member_1
				status = no
			}
			add_intel = {
				amount = 40
				who = event_target:fed_member_2
			}
			set_closed_borders = {
				who = event_target:fed_member_2
				status = no
			}
		}
	}
}
planet_event = {
	id = origin.84
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		owner = {
			is_origin_doomsday = yes
			NOT = { has_country_flag = colonized_first_planet }
		}
	}

	immediate = {
		owner = { set_country_flag = colonized_first_planet }
		planet_event = { id = origin.85 days = 5 }
	}
}
country_event = {
	id = origin.112
	hide_window = yes

	fire_only_once = yes

	is_triggered_only = yes

	immediate = {
		if = {
			limit = {
				count_country = {
					limit = {
						is_primitive = yes
					}
					count < 3
				}
			}
			capital_scope = {
				while = {
					count = 3
					spawn_system = {
						min_distance = 10
						max_distance = 100
						initializer = pre_ftl_init_01
						hyperlane = no
						is_discovered = no
					}
					add_extra_hyperlane_to_spawned_system_effect = yes
					add_extra_hyperlane_to_spawned_system_effect = yes
				}
			}
		}
		if = {
			limit = {
				any_playable_country = {
					is_origin_broken_shackles = yes
				}
			}
		}
		else = {
			uplift_pre_ftl_with_origin_effect = {
				ORIGIN = origin_broken_shackles
			}
			set_country_flag = victims_of_@event_target:MSI_country
		}
	}
}
country_event = {
	id = origin.113
	hide_window = yes

	fire_only_once = yes

	is_triggered_only = yes

	immediate = {
		if = {
			limit = {
				any_playable_country = {
					is_origin_payback = yes
				}
			}
		}
		else = {
			uplift_pre_ftl_with_origin_effect = {
				ORIGIN = origin_payback
			}
			set_country_flag = victims_of_@event_target:MSI_country
		}
	}
}
country_event = {
	id = origin.1001
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		is_origin_galactic_doorstep = yes
	}

	immediate = {
		capital_scope = {
			solar_system = {
				spawn_megastructure = {
					name = "NAME_Galactic_Doorstep"
					type = "gateway_ruined"
					random_pos = yes
					orbit_angle = 360
					init_effect = {
						set_megastructure_flag = doorstep_gateway@root
						save_event_target_as = doorstep_gateway
					}
				}
			}
		}
		set_country_flag = encountered_first_gateway
		country_event = { id = origin.1000 days = 300 random = 30 }
	}
}
country_event = {
	id = origin.1030
	title = "origin.1030.name"
	desc = {
		text = "origin.1030.desc"
		trigger = {
			NOT = { has_ethic = ethic_gestalt_consciousness }
		}
	}
	desc = {
		text = "origin.1030.desc.gestalt"
		trigger = {
			has_ethic = ethic_gestalt_consciousness
		}
	}
	picture = GFX_evt_atmospheric_entry
	show_sound = event_energy_field
	location = owner

	is_triggered_only = yes

	trigger = {
		is_origin_galactic_doorstep = yes
		fromfromfrom = {
			has_fleet_flag = gateway_vermin
		}
	}

	immediate = {
	}

	after = {
	}

	option = {
		name = origin.1030.a
		hidden_effect = {
			remove_country_flag = gateway_swarm
		}
	}
}
country_event = {
	id = origin.1050
	title = origin.1050.name
	desc = origin.1050.desc
	picture = GFX_evt_drifting_gateway
	show_sound = event_default
	location = from

	is_triggered_only = yes

	trigger = {
		is_origin_galactic_doorstep = yes
		fromfromfrom = { has_megastructure_flag = doorstep_gateway@root }
	}

	immediate = {
		if = {
			limit = { NOT = { has_country_flag = gateway_reactivated } }
			set_country_flag = gateway_reactivated
		}
	}

	option = {
		name = origin.1050.A

		if = {
			limit = {
				NOR = {
					has_tech_option = tech_gateway_construction
					has_technology = tech_gateway_construction
				}
			}
			add_research_option = tech_gateway_construction
			add_tech_progress = {
				tech = tech_gateway_construction
				progress = 0.2
			}
		}
		else_if = {
			limit = { has_tech_option = tech_gateway_construction }
			add_tech_progress = {
				tech = tech_gateway_construction
				progress = 0.2
			}
		}
	}
}
country_event = {
	id = origin.1199
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		is_origin_shoulders_of_giants = yes
		NOT = { has_country_flag = origin_shoulders_of_giants_initialised }
	}

	immediate = {
		set_country_flag = origin_shoulders_of_giants_initialised
		capital_scope = {
			if = {
				limit = {
					has_moon = yes
				}
				random_moon = {
					create_archaeological_site = site_ex_gravitas
					root = {
						set_country_flag = shoulders_origin_@prev
					}
				}
				root = {
					set_country_flag = arc_site_moon
				}
			}
			else = {
				solar_system = {
					random_system_planet = {
						limit = {
							is_colonizable = no
							is_star = no
							is_asteroid = no
							is_homeworld = no
							NOT = { is_planet_class = pc_gas_giant }
						}
						create_archaeological_site = site_ex_gravitas
						root = {
							set_country_flag = shoulders_origin_@prev
						}
					}
					root = {
						set_country_flag = arc_site_planet
					}
				}
			}
			solar_system = {
				set_variable = {
					which = origin_shoulders_of_giants_planets
					value = 1
				}
				every_system_planet = {
					limit = {
						is_colonizable = no
						is_star = no
						is_asteroid = no
						is_homeworld = no
						NOR = {
							is_planet_class = pc_gas_giant 
							exists = archaeological_site
							has_planet_flag = suppress_archaeological_sites
						}
					}
					prev = {
						change_variable = {
							which = origin_shoulders_of_giants_planets
							value = 1
						}
					}
				}
				if = {
					limit = {
						check_variable = {
							which = origin_shoulders_of_giants_planets
							value < 6
						}
					}
					spawn_planet = {
						class = pc_gas_giant
						location = this
						orbit_distance_offset = 190
						orbit_angle_offset = 127
						size = 21
						init_effect = {
							set_name = "NAME_Islena"
							save_event_target_as = new_planet
							solar_system = {
								spawn_planet = {
									class = pc_barren_cold
									location = event_target:new_planet
									orbit_location = yes
									orbit_distance_offset = 15
									orbit_angle_offset = 0
									size = 18
									init_effect = {
										set_name = "NAME_Haradas"
									}
								}
								change_variable = {
									which = origin_shoulders_of_giants_planets
									value = 1
								}
								if = {
									limit = {
										check_variable = {
											which = origin_shoulders_of_giants_planets
											value < 6
										}
									}
									spawn_planet = {
										class = pc_barren_cold
										location = event_target:new_planet
										orbit_location = yes
										orbit_distance_offset = 21
										orbit_angle_offset = 67
										size = 11
										init_effect = {
											set_name = "NAME_Koras"
										}
									}
									change_variable = {
										which = origin_shoulders_of_giants_planets
										value = 1
									}
								}
								if = {
									limit = {
										check_variable = {
											which = origin_shoulders_of_giants_planets
											value < 6
										}
									}
									spawn_planet = {
										class = pc_barren
										location = event_target:new_planet
										orbit_location = yes
										orbit_distance_offset = 27
										orbit_angle_offset = 143
										size = 14
										init_effect = {
											set_name = "NAME_Melidas"
										}
									}
									change_variable = {
										which = origin_shoulders_of_giants_planets
										value = 1
									}
								}
								if = {
									limit = {
										check_variable = {
											which = origin_shoulders_of_giants_planets
											value < 6
										}
									}
									spawn_planet = {
										class = pc_toxic
										location = event_target:new_planet
										orbit_location = yes
										orbit_distance_offset = 32
										orbit_angle_offset = 291
										size = 16
										init_effect = {
											set_name = "NAME_Theros"
										}
									}
									change_variable = {
										which = origin_shoulders_of_giants_planets
										value = 1
									}
								}
								if = {
									limit = {
										check_variable = {
											which = origin_shoulders_of_giants_planets
											value < 6
										}
									}
									spawn_planet = {
										class = pc_toxic
										location = event_target:new_planet
										orbit_location = yes
										orbit_distance_offset = 37
										orbit_angle_offset = 5
										size = 8
										init_effect = {
											set_name = "NAME_Ira"
										}
									}
								}
							}
						}
					}
				}
			}
		}
		solar_system = {
			set_variable = {
				which = origin_shoulders_of_giants_planets
				value = 0
			}
		}
	}
}
country_event = {
	id = origin.1219
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		is_origin_shoulders_of_giants = yes
	}

	immediate = {
		capital_scope = {
			solar_system = {
				random_system_planet = {
					limit = {
						is_colonizable = no
						is_star = no
						is_asteroid = no
						is_homeworld = no
						NOT = { is_planet_class = pc_gas_giant }
						NOT = { exists = archaeological_site }
						NOT = { has_planet_flag = suppress_archaeological_sites }
					}
					create_archaeological_site = site_something_waiting
					root = {
						set_country_flag = shoulders_origin_@prev
					}
				}
			}
		}
	}
}
country_event = {
	id = origin.1239
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		is_origin_shoulders_of_giants = yes
	}

	immediate = {
		capital_scope = {
			solar_system = {
				random_system_planet = {
					limit = {
						is_colonizable = no
						is_star = no
						is_asteroid = no
						is_homeworld = no
						NOT = { is_planet_class = pc_gas_giant }
						NOT = { exists = archaeological_site }
						NOT = { has_planet_flag = suppress_archaeological_sites }
					}
					create_archaeological_site = site_buried_deep
					root = {
						set_country_flag = shoulders_origin_@prev
					}
				}
			}
		}
	}
}
country_event = {
	id = origin.1249
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		is_origin_shoulders_of_giants = yes
	}

	immediate = {
		capital_scope = {
			solar_system = {
				random_system_planet = {
					limit = {
						is_colonizable = no
						is_star = no
						is_asteroid = no
						is_homeworld = no
						NOT = { is_planet_class = pc_gas_giant }
						NOT = { exists = archaeological_site }
						NOT = { has_planet_flag = suppress_archaeological_sites }
					}
					create_archaeological_site = site_in_memoriam
					root = {
						set_country_flag = shoulders_origin_@prev
					}
				}
			}
		}
	}
}
country_event = {
	id = origin.1269
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		is_origin_shoulders_of_giants = yes
	}

	immediate = {
		capital_scope = {
			solar_system = {
				random_system_planet = {
					limit = {
						is_colonizable = no
						is_star = no
						is_asteroid = no
						is_homeworld = no
						NOT = { is_planet_class = pc_gas_giant }
						NOT = { exists = archaeological_site }
						NOT = { has_planet_flag = suppress_archaeological_sites }
					}
					create_archaeological_site = site_the_last_stand
					root = {
						set_country_flag = shoulders_origin_@prev
					}
				}
			}
		}
	}
}
country_event = {
	id = origin.1289
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		is_origin_shoulders_of_giants = yes
	}

	immediate = {
		capital_scope = {
			solar_system = {
				random_system_planet = {
					limit = {
						is_colonizable = no
						is_star = no
						is_asteroid = no
						is_homeworld = no
						NOT = { is_planet_class = pc_gas_giant }
						NOT = { exists = archaeological_site }
						NOT = { has_planet_flag = suppress_archaeological_sites }
					}
					create_archaeological_site = site_dark_secret
					root = {
						set_country_flag = shoulders_origin_@prev
					}
				}
			}
		}
	}
}
planet_event = {
	id = origin.3001
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		owner = {
			is_origin_tree_of_life = yes
		}
	}

	immediate = {
		add_deposit = d_tree_of_life_colony
		remove_modifier = no_lifetree #as the planet transfer events fire before this
	}
}
planet_event = {
	id = origin.3004
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		NOT = { days_passed < 1 }
		OR = {
			AND = {
				owner = { is_origin_tree_of_life = yes }
				NOR = {
					has_deposit = d_tree_of_life_colony
					has_deposit = d_tree_of_life_home
					has_modifier = no_lifetree
				}
			}
			AND = {
				owner = { NOT = { is_origin_tree_of_life = yes } }
				has_modifier = no_lifetree
			}
		}
	}

	immediate = {
		if = {
			limit = {
				owner = { is_origin_tree_of_life = yes }
				NOT = {
					has_deposit = d_tree_of_life_colony
					has_deposit = d_tree_of_life_home
				}
			}
			add_modifier = { modifier = no_lifetree }
		}
		if = {
			limit = {
				owner = { NOT = { is_origin_tree_of_life = yes } }
			}
			remove_modifier = no_lifetree
		}
	}
}
planet_event = {
	id = origin.3101
	title = "origin.3101.name"
	desc = "origin.3101.desc"
	picture = GFX_evt_overgrown_city
	show_sound = event_alien_nature

	is_triggered_only = yes

	trigger = {
		owner = {
			is_origin_remnant = yes
			num_owned_planets < 4
		}
		has_planet_flag = prescripted_ideal
		NOT = { has_modifier = colonial_remains }
	}

	option = {
		name = EXCELLENT
		add_modifier = { modifier = colonial_remains }
		add_deposit = d_ruined_arcology
		hidden_effect = { #maybe add a random blocker to hint at why the colony was lost
			random_list = {
				50 = {}
				5 = { add_deposit = d_radioactive_wasteland }
				5 = { add_deposit = d_city_ruins }
				5 = { add_deposit = d_crater }
				5 = { add_deposit = d_mutant_landfill }
				5 = { add_deposit = d_ancient_bombardment_craters }
				5 = { add_deposit = d_ancient_battlefield }
				5 = { add_deposit = d_impact_crater }
				5 = { add_deposit = d_ancient_particle_accelerator }
				5 = { add_deposit = d_harvester_fields }
				5 = { add_deposit = d_organic_landfill }
				1 = { add_deposit = d_organic_slurry }
			}
		}
	}
}
country_event = {
	id = origin.3150
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		is_origin_shattered_ring = yes
	}

	immediate = {
		if = {
			limit = { num_guaranteed_colonies >= 2 }
			capital_scope = {
				solar_system = {
					every_megastructure = {
						limit = { 
							exists = owner
							owner = { is_origin_shattered_ring = yes }
							is_megastructure_type = ring_world_ruined
						}
						remove_megastructure = this
					}
					spawn_shattered_ring_guaranteed_1_effect = yes
					spawn_shattered_ring_guaranteed_2_effect = yes
				}
			}
		}
		else_if = {
			limit = { num_guaranteed_colonies >= 1 }
			capital_scope = {
				solar_system = {
					random_megastructure = {
						limit = {
							exists = owner
							owner = { is_origin_shattered_ring = yes }
							is_megastructure_type = ring_world_ruined
							has_megastructure_flag = guaranteed_1
						}
						remove_megastructure = this
					}
					spawn_shattered_ring_guaranteed_1_effect = yes
				}
			}
		}
	}
}
country_event = {
	id = origin.3200
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_origin_progenitor_hive = yes
	}

	immediate = {
		every_owned_leader = {
			limit = { is_idle = no }
			#This approximates a function to level up every 1.5(n+1) years so that you can expect to get a level 10 leader after 80 years.
			export_trigger_value_to_variable = {
				trigger = has_skill
				variable = experience_bonus
			}
			multiply_variable = {
				which = experience_bonus
				value = 2.5
			}
			floor_variable = experience_bonus

			change_variable = {
				which = experience_bonus
				value = 4
			}
			random_list = { #We want some randomness
				1 = {
					set_variable = {
						which = random_factor
						value = -3
					}
				}
				1 = {
					set_variable = {
						which = random_factor
						value = -2
					}
				}
				1 = {
					set_variable = {
						which = random_factor
						value = -1
					}
				}
				1 = {
					set_variable = {
						which = random_factor
						value = 0
					}
				}
				1 = {
					set_variable = {
						which = random_factor
						value = 1
					}
				}
				1 = {
					set_variable = {
						which = random_factor
						value = 2
					}
				}
				1 = {
					set_variable = {
						which = random_factor
						value = 3
					}
				}
			}
			change_variable = {
				which = experience_bonus
				value = random_factor
			}
			add_experience = experience_bonus

			clear_variable = experience_bonus
			clear_variable = random_factor
		}
	}
}
planet_event = {
	id = origin.3205
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		owner = { is_origin_progenitor_hive = yes }
		exists = from
		from = {
			OR = {
				has_deposit = d_progenitor
				has_deposit = d_progenitor_empty
			}
		}
	}

	immediate = {
		if = {
			limit = {
				from = { has_deposit = d_progenitor }
			}
			from = { remove_deposit = d_progenitor }
			add_deposit = d_progenitor
		}
		else_if = {
			limit = {
				from = { has_deposit = d_progenitor_empty }
			}
			from = { remove_deposit = d_progenitor_empty }
			add_deposit = d_progenitor_empty
		}
	}
}
country_event = {#Capital world lost
 	id = origin.3210
 	title = origin.3210.name
 	desc = origin.3210.desc
 	picture = GFX_evt_progenitor_throne
 	show_sound = event_bad_omen

 	is_triggered_only = yes

 	trigger = {
 		is_origin_progenitor_hive = yes
 		fromfrom = { has_deposit = d_progenitor }
 	}

 	immediate = {
 		fromfrom = {
 			remove_deposit = d_progenitor
 			add_deposit = d_progenitor_empty
 		}
 	}

 	option = {
 		name = origin.3215.a
 		 if = {
 		 	limit = { NOT = { has_modifier = missing_progenitor_modifier } }
			add_modifier = {
				modifier = missing_progenitor_modifier
				days = -1
			}
		}
 	}
}
planet_event = {
	id = origin.3225
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		owner = { is_origin_progenitor_hive = yes }
		NOT = {
			num_assigned_jobs = {
				job = offspring_drone
				value >= 1
			}
		}
	}

	immediate = {
		if = {
			limit = {
				NOT = { has_modifier = missing_offspring_modifier }
			}
			add_modifier = {
				modifier = missing_offspring_modifier
				days = -1
			}
		}
	}
}
country_event = {
	id = origin.3230
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		owner = { is_origin_progenitor_hive = yes }
	}

	immediate = {
		every_owned_planet = {
			limit = {
				NOR = {
					has_modifier = missing_offspring_modifier
					num_assigned_jobs = {
						job = offspring_drone
						value >= 1
					}
				}
			}
			add_modifier = {
				modifier = missing_offspring_modifier
				days = -1
			}
		}
		every_owned_planet = {
			limit = {
				has_modifier = missing_offspring_modifier
				OR = {
					num_assigned_jobs = {
						job = offspring_drone
						value >= 1
					}
					has_deposit = d_progenitor
				}

			}
			remove_modifier = "missing_offspring_modifier"
		}
	}
}
country_event = {
	id = origin.3235
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		owner = { is_origin_progenitor_hive = yes }
		any_owned_planet = {
			has_modifier = missing_offspring_modifier
			NOT = { has_planet_flag = offspring_missing_warned }
			num_pops >= 3
			is_capital = no
		}
	}

	immediate = {
		every_owned_planet = {
			limit = {
				has_modifier = missing_offspring_modifier
				num_pops >= 3
				NOT = { has_planet_flag = offspring_missing_warned }
			}
			set_timed_planet_flag = {
				flag = offspring_missing_warned
				days = 720
			}
			create_message = {
				type = MESSAGE_NO_OFFSPRING
				localization = MESSAGE_NO_OFFSPRING_DESC
				days = 30
				target = this
				variable = {
					type = name
					localization = PLANET
					scope = this
				}
			}
		}
	}
}
planet_event = {
	id = origin.3240 #removes the modifier if you aren't a progenitor hive
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		NOT = { From = { is_origin_progenitor_hive = yes } }
		has_modifier = missing_offspring_modifier
	}

	immediate = {
		remove_modifier = missing_offspring_modifier
	}
}
planet_event = { #Glassing the Progenitor
	id = origin.3245
 	title = origin.3245.name
 	desc = origin.3245.desc
 	picture = GFX_evt_progenitor_throne
 	show_sound = evn_ove_progenitor_throne
 	is_triggered_only = yes

 	pre_triggers = {
 		is_capital = yes
 		has_owner = yes
 	}

 	trigger = {
 		owner = { is_origin_progenitor_hive = yes }
 		has_deposit = d_progenitor
 	}

 	immediate = {
 		remove_deposit = d_progenitor
 		add_deposit = d_progenitor_empty
 	}
 	option = {
 		name = origin.3245.a
 	}
 	option = {
 		name = origin.3245.b
 	}
 	option = {
 		name = origin.3245.c
 	}
 	option = {
 		name = origin.3245.d
 	}
 	after = {
 	 	owner = {
 			if = {
 				limit = {
 					NOT = { has_modifier = missing_progenitor_modifier }
 				}
				add_modifier = {
					modifier = missing_progenitor_modifier
					days = -1
				}
			}
		}
 	}
}
country_event = {
	id = origin.3250 #removes the deposit even if you kill the country
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		is_origin_progenitor_hive = yes
		capital_scope = {
			OR = {
				has_deposit = d_progenitor
				has_deposit = d_progenitor_empty
			}
		}
	}

	immediate = {
		capital_scope = {
			if = {
				limit = { has_deposit = d_progenitor }
				remove_deposit = d_progenitor
			}
			if = {
				limit = { has_deposit = d_progenitor_empty }
				remove_deposit = d_progenitor_empty
			}
		}
	}
}
country_event = {
	id = origin.3260
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		is_origin_progenitor_hive = yes
		fromfrom = {
			has_component = SHIP_AURA_OFFSPRING
			solar_system = {
				NOT = {
					any_ship_in_system = {
						NOT = {
							is_same_value = fromfrom
						}
						is_owned_by = root
						has_component = SHIP_AURA_OFFSPRING
					}
				}
			}
		}
	}

	immediate = {
		create_message = {
			type = MESSAGE_FINAL_OFFSPRING_SHIP
			localization = MESSAGE_FINAL_OFFSPRING_SHIP_DESC
			days = 30
			target = fromfrom.solar_system
			variable = {
				type = name
				localization = SYSTEM
				scope = fromfrom.solar_system
			}
		}
	}
}
country_event = {
	id = origin.3270
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		from = { is_origin_progenitor_hive = yes }
	}

	immediate = {
		set_origin = origin_progenitor_hive
		capital_scope = {
			add_deposit = d_progenitor
		}
	}
}
ship_event = {
	id = origin.3505
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		owner = { is_origin_star_slingshot = yes }
		solar_system = {
			has_star_flag = quantum_catapult_system_flag@root.owner
			NOT = { has_star_flag = quantum_catapult_occupied }
		}
	}

	immediate = {
		solar_system = {
			set_star_flag = quantum_catapult_occupied
		}
		owner = {
			country_event = {
				id = origin.3510
			}
		}
	}
}
country_event = {
	id = origin.3510
	title = origin.3510.title
	desc = origin.3510.desc
	picture = GFX_evt_slingshot_stars
	show_sound = evn_ove_slingshot_stars

	is_triggered_only = yes

	trigger = {
		is_origin_star_slingshot = yes
	}

	option = {
		name = origin.3510.a
		add_resource = { influence = 150 }
	}
}
country_event = {
	id = origin.5600

	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_origin_shroudwalker_apprentice = yes
		exists = event_target:shroudwalker_enclave_country #set up in initializers
	}

	immediate = {
		# Have met aliens (the Shroudwalkers)
		set_country_flag = first_contact_event
		set_country_flag = Story2 # Already encountered spacefarers

		# Get to know the Shroudwalkers from the start
		establish_communications_no_message = event_target:shroudwalker_enclave_country

		# Set up all necessary country flags
		set_country_flag = shroudwalker_enclave_diplomacy_engaged
		set_country_flag = shroudwalker_enclave_bought_shroud_beacon

		every_system = {
			limit = {
				has_star_flag = shroudwalker_enclave_system
			}
			root = { set_visited = prev }
		}

		# Shroudify some planets
		while = {
			count = 7
			closest_system = {
				limit = {
					any_system_planet = {
						uninhabitable_regular_planet = yes
						NOR = {
							has_modifier = terraforming_candidate
							has_anomaly = yes
						}
					}
					NOT = {
						count_system_planet = {
							count = 2
							limit = {
								is_planet_class = pc_shrouded
							}
						}
					}
				}
				min_steps = 1
				max_steps = 3
				random_system_planet = {
					limit = {
						uninhabitable_regular_planet = yes
						NOR = {
							has_modifier = terraforming_candidate
							has_anomaly = yes
						}
					}
					weights = {
						base = 1
						modifier = {
							add = trigger:planet_size
						}
					}
					change_pc = pc_shrouded
					clear_planet_modifiers = yes
					clear_deposits = yes
				}
			}
		}
		if = {
			limit = {
				capital_star.solar_system = {
					any_system_planet = {
						uninhabitable_regular_planet = yes
					}
				}
			}
			capital_star.solar_system = {
				while = {
					count = 2
					random_system_planet = {
						limit = {
							uninhabitable_regular_planet = yes
							NOT = { has_modifier = terraforming_candidate }
						}
						weights = {
							base = 1
							modifier = {
								add = trigger:planet_size
							}
						}
						change_pc = pc_shrouded
						clear_planet_modifiers = yes
						clear_deposits = yes
					}
				}
			}
		}

		# Let them start researching Psionic Theory from the get-go
		add_research_option = tech_psionic_theory
	}
}
country_event = {
	id = origin.5605
	title = origin.5605.name
	trigger = {
		is_origin_shroudwalker_apprentice = yes
		exists = event_target:shroudwalker_enclave_country
		has_country_flag = first_contact_event
		has_country_flag = Story2
		has_country_flag = shroudwalker_enclave_diplomacy_engaged
	}
	desc = {
		trigger = {
			hidden:owner = {
				switch = {
					trigger = has_authority
					auth_corporate = { text = origin.5605.corporate.desc }
					default = { text = origin.5605.generic.desc }
				}
			}
		}
	}

	is_triggered_only = yes

	diplomatic = yes
	custom_gui = "enclave_artist_window"
	custom_gui_option = "enclave_artist_option"
	picture_event_data = {
		portrait = event_target:shroudwalker_enclave_country
		room = shroudwalkers_room
	}

	immediate = {
		country_event = {
			id = tutorial.2100 # Tutorial: Enclave Diplomacy
			scopes = { from = event_target:shroudwalker_enclave_country }
		}
	}

	#Respond with awe and reverence - offers a callback flavour for future events.
	option = {
		name = origin.5605.a
		custom_tooltip = shroud_beacon_info
		custom_tooltip = origin.5605.tt #"We also receive:"
		add_resource = { rare_crystals = 25 }
		set_country_flag = shroudwalker_enclave_bought_shroud_beacon
		hidden_effect = {
			event_target:shroudwalker_enclave_country = {
				add_trust = {
					who = root
					amount = 10
				}
			}
			set_country_flag = shroud_beacon
		}
	}
	#Respond with arrogance - offers a callback flavour for future events.
	option = {
		name = origin.5605.b
		custom_tooltip = shroud_beacon_info
		custom_tooltip = origin.5605.tt #"We also receive:"
		add_resource = { rare_crystals = 25 }
		set_country_flag = shroudwalker_enclave_bought_shroud_beacon
		hidden_effect = {
			set_country_flag = shroud_beacon
		}
	}
}
fleet_event = {
	id = origin.5620
	title = "origin.5615.name"
	desc = {
		trigger = {
			has_fleet_flag = used_shroud_tunnel
		}
		text = origin.5620.b.desc
	}
	desc = {
		trigger = {
			NOT = {
				has_fleet_flag = used_shroud_tunnel
			}
		}
		text = origin.5615.a.desc
	}
	location = event_target:shroudwalker_enclave_system

	diplomatic = yes
	custom_gui = "enclave_artist_window"
	custom_gui_option = "enclave_artist_option"
	picture_event_data = {
		portrait = event_target:shroudwalker_enclave_country
		room = shroudwalkers_room
	}

	is_triggered_only = yes

	trigger = {
		owner = {
			is_origin_shroudwalker_apprentice = yes
		}
		fromfrom = {
			has_star_flag = shroudwalker_enclave_system
		}
		NOT = {
			owner = {
				has_country_flag = teachers_origin_meet_enclave
			}
		}
	}

	immediate = {
		owner = {
			set_country_flag = teachers_origin_meet_enclave
		}
	}

	option = {
		name = EXCELLENT
	}
}
country_event = {
	id = origin.5625
	title = "origin.5625.name"
	desc = {
		trigger = {
			NOT = { exists = event_target:shroudwalker_system_owner_closed }
		}
		text = "origin.5625.a.desc"
	}
	desc = {
		trigger = {
			exists = event_target:shroudwalker_system_owner_closed
		}
		text = "origin.5625.b.desc"
	}
	picture = GFX_evt_shroud_tunnel
	show_sound = event_mystic_reveal
	location = FROM

	is_triggered_only = yes

	trigger = {
		is_origin_shroudwalker_apprentice = yes
		NOT = { has_country_flag = built_first_shroud_tunnel }
		any_owned_starbase = {
			has_starbase_building = shroud_beacon
		}
	}

	immediate = {
		event_target:shroudwalker_enclave_country = {
			set_country_flag = shroud_beacon@root
		}
		if = {
			limit = {
				exists = event_target:shroudwalker_enclave_system
				event_target:shroudwalker_enclave_system = {
					exists = owner
					owner = { has_closed_borders = root }
				}
			}
			event_target:shroudwalker_enclave_system = {
				owner = {
					save_event_target_as = shroudwalker_system_owner_closed
				}
			}
		}
		owner = {
			set_country_flag = built_first_shroud_tunnel
			add_seen_bypass_type = shroud_tunnel
		}
	}

	option = {
		trigger = {
			NOT = { exists = event_target:shroudwalker_system_owner_closed }
		}
		name = "origin.5625.a.option"
	}

	option = {
		trigger = {
			exists = event_target:shroudwalker_system_owner_closed
		}
		name = UNDERSTOOD
	}
}
country_event = {
	id = origin.5700

	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_origin_imperial = yes
	}

	immediate = {
		if = {
			limit = {
				NOT = {
					closest_system = {
						limit = { has_star_flag = overlord_empire_flag }
						max_steps = 5
					}
				}
			}
			capital_scope.solar_system = {
				spawn_system = {
					min_distance = 30
					max_distance = 80
					min_jumps = 2
					max_jumps = 3
					hyperlane = yes
					initializer = overlord_system_8_init
				}
			}
		}
		# Have met aliens (their liege)
		set_country_flag = first_contact_event
		set_country_flag = Story2 # Already encountered spacefarers

		event_target:origin_imperial_homeland_country = {
			every_subject = {
				establish_communications_no_message = root
				every_system_within_border = {
					set_surveyed = {
						surveyed = yes
						surveyor = root
					}
				}
			}
			establish_communications_no_message = root
			every_system_within_border = {
				set_surveyed = {
					surveyed = yes
					surveyor = root
				}
			}
		}
		set_subject_of = {
			who = event_target:origin_imperial_homeland_country
		}
		overlord = {
			add_opinion_modifier = {
				modifier = opinion_imperial_vassal_ai_opinion
				who = root
			}
		}
		random_agreement = {
			limit = {
				owner = { is_same_value = root.overlord }
				target = { is_same_value = root }
			}
			set_agreement_terms = {
				subject_diplomacy = subject_can_do_diplomacy
				subject_integration = subject_can_not_be_integrated
				subject_expand = subject_can_expand_with_tithe
				subject_holdings_limit = subject_holdings_limit_1
				joins_subject_wars = joins_subject_wars_defensive
				joins_overlord_wars = joins_overlord_wars_none
			}
		}
	}
}
country_event = {
	id = origin.5703
	title = TRANSMISSION
	desc = origin.5703.desc

	diplomatic = yes

	is_triggered_only = yes

	picture_event_data = {
		portrait = event_target:overlord_empire
		planet_background = event_target:overlord_empire
		graphical_culture = event_target:overlord_empire
		city_level = event_target:overlord_empire
		room = event_target:overlord_empire.ruler
	}

	trigger = {
		is_origin_imperial = yes
		is_ai = no
	}

	immediate = {
		overlord = { save_event_target_as = overlord_empire }
	}

	option = {
		name = origin.5703.a
		icon = {
			icon = GFX_option_icon_hostile
			text = dialog_hostile_overlord
		}
		set_country_flag = imperial_fiefdom_harsh_response
		event_target:overlord_empire = {
			add_opinion_modifier = {
				who = root
				modifier = opinion_imperial_vassal_harsh_response_overlord_opinion
			}
		}
	}
	option = {
		name = origin.5703.b
		default_hide_option = yes
		icon = {
			icon = GFX_option_icon_isolationist
			text = dialog_wary_overlord
		}
	}
	option = {
		name = origin.5703.c
		icon = {
			icon = GFX_option_icon_friendly
			text = dialog_friendly_overlord
		}
		set_country_flag = imperial_fiefdom_grateful_response
		event_target:overlord_empire = {
			add_opinion_modifier = {
				who = root
				modifier = opinion_imperial_vassal_grateful_response_overlord_opinion
			}
		}
	}

	after = {
		hidden_effect = {
			country_event = { id = origin.5705 }
		}
	}
}
country_event = {
	id = origin.5705
	title = TRANSMISSION
	desc = {
		trigger = {
			has_country_flag = imperial_fiefdom_harsh_response
		}
		text = origin.5705.desc.harsh
	}
	desc = {
		trigger = {
			has_country_flag = imperial_fiefdom_grateful_response
		}
		text = origin.5705.desc.grateful
	}
	desc = {
		trigger = {
			has_country_flag = imperial_fiefdom_reconsider_response
		}
		text = origin.5705.desc.reconsider
	}
	desc = {
		trigger = {
			NOR = {
				has_country_flag = imperial_fiefdom_harsh_response
				has_country_flag = imperial_fiefdom_grateful_response
				has_country_flag = imperial_fiefdom_reconsider_response
			}
		}
		text = origin.5705.desc
	}

	diplomatic = yes

	is_triggered_only = yes

	picture_event_data = {
		portrait = event_target:overlord_empire
		planet_background = event_target:overlord_empire
		graphical_culture = event_target:overlord_empire
		city_level = event_target:overlord_empire
		room = event_target:overlord_empire.ruler
	}

	trigger = {
		is_origin_imperial = yes
		is_ai = no
	}

	option = {
		name = origin.5705.a
		origin_imperial_fiefdom_bulwark_specialization_effect = yes
	}
	option = {
		name = origin.5705.b
		hidden_effect = {
			country_event = { id = origin.5706 }
		}
	}
	option = {
		name = origin.5705.c
		default_hide_option = yes
		origin_imperial_fiefdom_scholarium_specialization_effect = yes
	}
	option = {
		name = origin.5705.d
		hidden_effect = {
			country_event = { id = origin.5707 }
		}
	}
	option = {
		name = origin.5705.e
		origin_imperial_fiefdom_prospectorium_specialization_effect = yes
	}
	option = {
		name = origin.5705.f
		hidden_effect = {
			country_event = { id = origin.5708 }
		}
	}

	after = {
		remove_country_flag = imperial_fiefdom_harsh_response
		remove_country_flag = imperial_fiefdom_grateful_response
	}
}
country_event = {
	id = origin.5710

	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_origin_imperial = yes
		is_ai = yes
	}

	immediate = {
		overlord = { save_event_target_as = overlord_empire }

		if = { # Influence reduction modifier
			limit = {
				NOT = { has_country_flag = origin_imperial_vassal_rival_country }
			}
			add_modifier = {
				modifier = imperial_vassal_ai_modifier
				days = -1
			}
		}

		# Opinion Modifiers
		add_opinion_modifier = {
			modifier = opinion_imperial_overlord_ai_opinion
			who = event_target:overlord_empire
		}
		event_target:overlord_empire = {
			every_subject = {
				limit = {
					is_ai = no
				}
				root = {
					add_opinion_modifier = {
						modifier = opinion_imperial_vassal_ai_opinion
						who = prev
					}
				}
			}
		}

		random_agreement = { # Agreement Terms with Overlord
			limit = {
				owner = { is_same_value = root.overlord }
				target = { is_same_value = root }
			}
			set_agreement_terms = { # Generic values everyone gets
				subject_integration = subject_can_not_be_integrated
				subject_holdings_limit = subject_holdings_limit_1
				joins_subject_wars = joins_subject_wars_all
				joins_overlord_wars = joins_overlord_wars_none
			}
			if = { # Rival Country specific
				limit = {
					root = { has_country_flag = origin_imperial_vassal_rival_country }
				}
				set_agreement_terms = {
					subject_diplomacy = subject_can_do_diplomacy
				}
			}
			else = { # Rest
				set_agreement_terms = {
					subject_diplomacy = subject_can_not_do_diplomacy
				}
				random_list = {
					1 = {
						set_agreement_terms = {
							subject_expand = subject_cannot_expand
						}
					}
					1 = {
						set_agreement_terms = {
							subject_expand = subject_can_expand_with_tithe
						}
					}
				}
			}
		}

		if = { # Rival Country bonuses
			limit = {
				has_country_flag = origin_imperial_vassal_rival_country
			}
			create_fleet = {
				effect = {
					set_owner = root
					create_ship = {
						name = random
						random_existing_design = science
					}
					set_location = root.capital_star
				}
			}
			create_fleet = {
				effect = {
					set_owner = root
					create_ship = {
						name = random
						random_existing_design = constructor
					}
					set_location = root.capital_star
				}
			}
			create_fleet = {
				effect = {
					set_owner = root
					while = {
						count = 3
						create_ship = {
							name = random
							design = NAME_Dagger
						}
					}
					set_location = root.capital_star
				}
			}
			add_resource = {
				energy = 2000
				food = 1000
				minerals = 1000
				influence = 300
			}
		}

		# Holding Building
		capital_scope = {
			add_holding = {
				holding = holding_garrison
				owner = event_target:overlord_empire
			}
		}
	}
}
country_event = { # Vassal version
	id = origin.5725
	title = origin.5725.title
	desc = origin.5725.desc
	picture = GFX_evt_arguing_senate

	is_triggered_only = yes

	trigger = {
		is_origin_imperial = yes
	}

	option = {
		name = origin.5725.a
	}
}
country_event = { # Vassal Version
	id = origin.5735
	title = origin.5735.title
	desc = origin.5735.desc
	picture = GFX_evt_burning_settlement

	is_triggered_only = yes

	trigger = {
		is_origin_imperial = yes
	}

	option = {
		name = origin.5735.a
		trigger = {
			OR = {
				is_ai = no
				is_militarist = no
				is_xenophobe = no
			}
		}
		set_subject_of = { who = none }
	}

	option = {
		name = origin.5735.b
		trigger = {
			OR = {
				is_ai = no
				is_militarist = yes
				is_xenophobe = yes
			}
		}

		set_subject_of = { who = none }

		add_resource = { influence = -100 }
		custom_tooltip = origin.5735.b.tt
		hidden_effect = {
			every_playable_country = {
				limit = {
					OR = {
						has_country_flag = origin_imperial_vassal_ex_overlord@event_target:previous_overlord
						is_origin_imperial = yes
					}
					NOT = { is_same_value = root }
				}
				root = {
					if = {
						limit = {
							NOT = {
								has_casus_belli = {
									target = prev
									type = cb_subjugation
								}
							}
						}
						add_casus_belli = {
							type = cb_subjugation
							who = prev
							days = 10800
						}
					}
				}
			}
		}
	}

	option = {
		name = origin.5735.c
		trigger = {
			is_ai = no
		}
		custom_tooltip = origin.5735.c.tt
		add_resource = { influence = 100 }
	}

	after = {
		if = {
			limit = {
				is_ai = yes
				NOT = { has_country_flag = origin_imperial_vassal_rival_country }
			}
			country_event = {
				id = origin.5740
				days = 15
				random = 45
			}
		}
	}
}
country_event = {
	id = origin.5740

	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_ai = yes
		is_origin_imperial = yes
		NOT = { has_country_flag = origin_imperial_vassal_rival_country }
	}

	immediate = {
		save_event_target_as = new_subject_target

		if = {
			limit = {
				any_country = {
					is_origin_imperial = yes
					relative_power = {
						who = root
						category = fleet
						value >= superior
					}
				}
			}
			random_country = {
				limit = {
					is_origin_imperial = yes
					relative_power = {
						who = root
						category = fleet
						value >= superior
					}
				}
				save_event_target_as = new_overlord_target
			}
			switch = {
				trigger = has_country_flag
				origin_imperial_vassal_technocrat_country = {
					event_target:new_overlord_target = {
						country_event = { id = origin.5745 }
					}
				}
				origin_imperial_vassal_prince_electorate_country = {
					event_target:new_overlord_target = {
						country_event = { id = origin.5750 }
					}
				}
				origin_imperial_vassal_palatinate_country = {
					event_target:new_overlord_target = {
						country_event = { id = origin.5755 }
					}
				}
				origin_imperial_vassal_league_country = {
					event_target:new_overlord_target = {
						country_event = { id = origin.5760 }
					}
				}
			}
		}
	}
}
country_event = {
	id = origin.5745
	title = origin.5745.title
	desc = origin.5745.desc
	picture = GFX_evt_society_research

	is_triggered_only = yes

	trigger = {
		is_origin_imperial = yes
	}

	option = {
		name = origin.5745.a
		origin_imperial_vassal_new_overlord_eventchain_1 = yes
		add_monthly_resource_mult = {
			resource = engineering_research
			value = @tier1researchreward
			min = @tier1researchmin
			max = @tier1researchmax
		}
	}
	option = {
		name = origin.5745.b
		trigger = {
			is_ai = no
		}
		origin_imperial_vassal_new_overlord_eventchain_2 = yes
	}
}
country_event = {
	id = origin.5750
	title = origin.5750.title
	desc = origin.5750.desc
	picture = GFX_evt_two_sided_deal
	show_sound = evn_ove_two_sided_deal

	is_triggered_only = yes

	trigger = {
		is_origin_imperial = yes
	}

	option = {
		name = origin.5750.a
		origin_imperial_vassal_new_overlord_eventchain_1 = yes
		add_monthly_resource_mult = {
			resource = influence
			value = @tier1influencereward
			min = @tier1influencemin
			max = @tier1influencemax
		}
	}
	option = {
		name = origin.5750.b
		trigger = {
			is_ai = no
		}
		origin_imperial_vassal_new_overlord_eventchain_2 = yes
	}
}
country_event = {
	id = origin.5755
	title = origin.5755.title
	desc = origin.5755.desc
	picture = GFX_evt_star_chart

	is_triggered_only = yes

	trigger = {
		is_origin_imperial = yes
	}

	option = {
		name = origin.5755.a
		origin_imperial_vassal_new_overlord_eventchain_1 = yes
		add_monthly_resource_mult = {
			resource = unity
			value = @tier1unityreward
			min = @tier1unitymin
			max = @tier1unitymax
		}
	}
	option = {
		name = origin.5755.b
		trigger = {
			is_ai = no
		}
		origin_imperial_vassal_new_overlord_eventchain_2 = yes
	}
}
country_event = {
	id = origin.5760
	title = origin.5760.title
	desc = origin.5760.desc
	picture = GFX_evt_smugglers_in_bar

	is_triggered_only = yes

	trigger = {
		is_origin_imperial = yes
	}

	option = {
		name = origin.5760.a
		origin_imperial_vassal_new_overlord_eventchain_1 = yes
		add_monthly_resource_mult = {
			resource = energy
			value = @tier1materialreward
			min = @tier1materialmin
			max = @tier1materialmax
		}
	}
	option = {
		name = origin.5760.b
		trigger = {
			is_ai = no
		}
		origin_imperial_vassal_new_overlord_eventchain_2 = yes
	}
}
country_event = { # Tombola, fired every year
	id = origin.6000
	hide_window = yes

	is_triggered_only = yes
	trigger = {
		is_origin_fotd = yes
		event_target:fotd_seperatist_planet@root = {
			owner = {
				has_country_flag = fotd_seperatist_country@root
			}
		}
		NOT = { has_country_flag = angered_seperatists }
	}

	immediate = {
		event_target:fotd_seperatist_planet@root = {
			owner = {
				save_event_target_as = fotd_habitants
			}
		}
		random_list = {
			1 = { 
				modifier = {
					factor = 0
					has_country_flag = fotd_leader_cooldown
				}
				country_event = { id = origin.6005 days = 5 random = 350 } #Gain Scientist
			}
			1 = { 
				modifier = {
					factor = 0
					has_country_flag = fotd_leader_cooldown
				}
				country_event = { id = origin.6006 days = 5 random = 350 } #Gain Admiral
			}
			2 = { country_event = { id = origin.6015 days = 5 random = 350 } } #Gain Technology
			2 = { 
				modifier = {
					factor = 0
					has_country_flag = fotd_requested_aid_recently
				}
				country_event = { id = origin.6020 days = 5 random = 350 } #Seperatist Deficit
			} 
			20 = {
				modifier = {
					factor = 0
					NOR = {
						has_deficit_situation_stage_2 = yes
						has_deficit_situation_stage_3 = yes
						has_deficit_situation_stage_4 = yes
					}
				}
				modifier = {
					factor = 0
					NOR = {
						has_country_flag = fotd_exploited_seperatists
						has_country_flag = fotd_aided_seperatists
					}
				}
				country_event = { id = origin.6025 } #Seperatists Help Player
			}
			20 = {}
		}
	}
}
first_contact_event = {
	id = origin.6044
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		OR = {
			owner = {
				is_origin_fotd = yes
				NOT = { has_country_flag = finished_sapient_first_contact }
			}
			from = {
				is_origin_fotd = yes
				NOT = { has_country_flag = finished_sapient_first_contact }
			}
		}
		from = { is_country_type = default }
		owner = { is_country_type = default }
	}

	immediate = {
		if = {
			limit = {
				owner = {
					is_origin_fotd = yes
					NOT = { has_country_flag = finished_sapient_first_contact }
				}
			}
			owner = {
				country_event = {
					id = origin.6045
					days = 14
					scopes = { from = from }
				}
			}
		}
		else = {
			from = {
				country_event = {
					id = origin.6045
					days = 14
					scopes = { from = root.owner }
				}
			}
		}
	}
}
country_event = { # Joining a Federation
	id = origin.6050
	hide_window = yes

	is_triggered_only = yes
	trigger = {
		From = {
			is_origin_fotd = yes
			NOT = {
				has_country_flag = joined_federation
			}
			any_planet_within_border = {
				has_planet_flag = fotd_seperatist_planet@from
				owner = {
					has_country_flag = fotd_seperatist_country@from
				}
			}
			is_country_type = default
		}
	}

	immediate = {
		from = { country_event = { id = origin.6055 days = 5 } }
	}
}
country_event = {
	id = origin.6064
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		is_origin_fotd = yes
		NOT = {
			has_country_flag = became_subject
		}
	}

	immediate = {
		country_event = { id = origin.6065 days = 5 }
	}
}
situation_event = {
	id = origin.6225
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		target.space_owner = {
			is_origin_fotd = yes
			home_planet = {
				is_same_value = root.owner.home_planet
			}
		}
	}

	immediate = {
		switch = {
			trigger = current_stage
			stage_2 = {
				target.space_owner = {
					country_event = { 
						id = origin.6230
					}
				}
			}
			stage_3 = {
				target.space_owner = {
					country_event = { 
						id = origin.6235
					}
				}
			}
			stage_4 = {
				target.space_owner = {
					country_event = { 
						id = origin.6240
					}
				}
			}
		}
	}
}
event = {
	id = origin.6245
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		any_playable_country = {
			is_origin_fotd = yes
		}
		years_passed > 10
	}

	immediate = {
		every_playable_country = {
			limit = {
				is_origin_fotd = yes
				any_pre_ftl_within_border = {
					has_country_flag = fotd_seperatist_country@prev
				}
			}
			random_pre_ftl_within_border = {
				limit = {
					has_country_flag = fotd_seperatist_country@prev
				}
				country_event = { id = origin.6250 random = 200 scopes = { from = prev } }
				country_event = { id = origin.6253 scopes = { from = prev } }
			}
		}
	}
}
fleet_event = {
	id = origin.6255
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		from = {
			has_star_flag = fotd_system
			exists = owner
			owner = {
				is_hostile = root.owner
				is_origin_fotd = yes
			}
			any_fleet_in_system = {
				owner = { is_country_type = primitive }
			}
		}
	}

	immediate = {
		from = {
			random_fleet_in_system = {
				limit = {
					owner = { is_country_type = primitive }
				}
				owner = {
					set_hostile = root.owner
					establish_communications_no_message = root.owner
				}
			}
		}
	}
}
country_event = {
	id = origin.6256
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		OR = {
			is_origin_fotd = yes
			AND = {
				exists = from
				from = {
					is_origin_fotd = yes
				}
			}
		}
	}

	immediate = {
		if = {
			limit = {
				is_origin_fotd = yes
			}
			event_target:fotd_seperatist_planet@root = {
				owner = {
					set_faction_hostility = {
						target = from
						set_hostile = no
						set_neutral = yes
						set_friendly = no
					}
				}
			}
		}
		else = {
			event_target:fotd_seperatist_planet@from = {
				owner = {
					set_faction_hostility = {
						target = root
						set_hostile = no
						set_neutral = yes
						set_friendly = no
					}
				}
			}
		}
	}
}
country_event = {
	id = origin.6270
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		if = {
			limit = {
				capital_scope = {
					has_observation_outpost = yes
					observation_outpost_owner = {
						is_origin_fotd = yes
					}
				}
				has_country_flag = fotd_hunter@capital_scope.observation_outpost_owner
				is_xenophobe = no
			}
			capital_scope.observation_outpost_owner = {
				country_event = { id = origin.6275 }
			}
		}
		else = {
			country_event = { id = origin.6270 days = 360 }
		}
	}
}
country_event = { #Seperatists would rather die than give you their planet
	id = origin.6280
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_origin_fotd = yes
		exists = fromfrom
		fromfrom = {
			OR = {
				is_country_type = default
				is_country_type = awakened_fallen_empire
			}
		}
		from = {
			any_system_planet = {
				has_owner = yes
				owner = {
					has_country_flag = fotd_seperatist_country@root
				}
			}
		}
		NOT = { is_same_species = fromfrom } #they wont nuke themselves if the invaders is the same species
	}

	immediate = {
		from = {
			random_system_planet = {
				limit = {
					has_planet_flag = fotd_seperatist_planet@root
				}
				every_owned_pop = {
					kill_pop = yes
				}
				change_pc = pc_nuked
				destroy_colony = yes
			}
		}
	}
}
country_event = {
	id = origin.4000
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_origin_payback = yes
	}

	immediate = {
		low_tech_start_add_research_options_effect = yes

		capital_scope = {
			solar_system = {
				set_star_flag = payback_system
			}

			# Dig site + ambient objects, for decoration
			owner = {
				set_country_flag = payback_origin_arcsite_owner@prev
			}

			set_planet_flag = payback_site_planet
			set_planet_flag = has_orbital_debris
			create_archaeological_site = payback_digsite
			create_ambient_object = {
				type = "payback_site_ship_object"
				use_3d_location = yes
				entity_offset_height = 10
				location = this
			}
			create_ambient_object = {
				type = "ancient_battlefield_02_object"
				use_3d_location = yes
				entity_offset_height = 0
				location = this
			}
			while = {
				count = 5
				create_ambient_object = {
					type = "small_debris_object"
					use_3d_location = yes
					entity_offset_height = { min = 10 max = -10 }
					location = this
				}
				last_created_ambient_object = {
					set_location = {
						target = prev
						distance = 200
						angle = random
					}
				}
			}
			while = {
				count = 5
				create_ambient_object = {
					type = "abandoned_ship_2_object"
					use_3d_location = no
					entity_offset_height = { min = 20 max = -20 }
					location = this
				}
				last_created_ambient_object = {
					set_location = {
						target = prev
						distance = 150
						angle = random
					}
				}
			}
		}
	}
}
country_event = {
	id = origin.4005
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		is_origin_payback = yes
	}

	immediate = {

		# Payback empire is aware of alien life
		set_country_flag = encountered_first_primitive
		set_country_flag = first_contact_event
		set_country_flag = first_alien_life
		set_country_flag = Story1
		set_country_flag = Story2
		set_country_flag = Story3
		set_country_flag = Story4
		set_country_flag = Story5
		set_country_flag = Story6
		set_country_flag = Story7
		set_country_flag = has_encountered_other_empire

		# First contact protocols fires between 3 and 6 months.
		country_event = { id = first_contact.1060 days = 135 random = 45 }

		species = { save_event_target_as = victim_species }

		# Change the planets of the slaver empire
		random_country = {
			limit = {
				has_country_flag = slavers_of_@root
			}
			every_owned_planet = {
				limit = { 
					has_modifier = colonial_remains
				}
				change_pc = owner.species
			}
		}

		# Debt Collectors event chain
		country_event = { id = origin.4010 days = 3600 random = 180 }
		# Arc site
		country_event = { id = origin.4900 days = 180 }
	}
}
country_event = {
	id = origin.4010
	title = "origin.4010.name"
	desc = "origin.4010.desc"
	picture = GFX_evt_enigmatic_cache
	show_sound = event_ancient_drone
	is_triggered_only = yes

	trigger = {
		is_origin_payback = yes
		NOT = {
			has_event_chain = "payback_debt_collectors_chain"
		}
	}

	immediate = {
		create_debt_collectors_country = yes
		# When the debt collectors will arrive
		set_saved_date = {
			key = payback_debt_collectors_timer
			days_from_present = 1800
			expires = 3180060
		}
		# How much you owe them
		set_variable = {
			which = debt_collectors_amount
			value = 1481893
		}
		# Number of times they visited you
		set_variable = {
			which = debt_collectors_visits
			value = 1
		}
		# Number of times you defeated them
		set_variable = {
			which = debt_collectors_defeats
			value = 0
		}
	}

	option = {
		name = origin.4010.a
		custom_tooltip = origin.4010.a.tooltip
		begin_event_chain = {
			event_chain = "payback_debt_collectors_chain"
			target = this
		}
	}

	after = {
		hidden_effect = {
			country_event = { id = origin.4015 days = 1800 }
		}
	}
}
country_event = {
	id = origin.4015
	title = "origin.4015.name"
	desc = "origin.4015.desc"
	is_triggered_only = yes
	diplomatic = yes
	picture_event_data = {
		portrait = event_target:debt_collectors_species
		room = ethic_spaceship_room
	}

	trigger = {
		exists = event_target:MSI_country
		is_origin_payback = yes
		has_event_chain = "payback_debt_collectors_chain"
	}

	option = { # Pay
		name = "origin.4015.a"
		hidden_effect = {
			country_event = { id = origin.4016 }
		}
	}

	option = { # Don't pay
		name = "origin.4015.b"
		hidden_effect = {
			country_event = { id = origin.4019 }
		}
	}

	option = { # Give me the lore dump
		name = "origin.4015.c"
		response_text = "origin.4015.c.response"
		is_dialog_only = yes
	}
}
country_event = {
	id = origin.4020
	title = "origin.4020.name"
	desc = {
		trigger = {
			check_variable = {
				which = debt_collector_defeats
				value = 0
			}
		}
		text = "origin.4020.desc"
	}
	desc = {
		trigger = {
			check_variable = {
				which = debt_collector_defeats
				value > 0
			}
		}
		text = "origin.4020.desc.repeat"
	}
	picture = GFX_evt_exploding_ship
	show_sound = event_ship_explosion
	is_triggered_only = yes
	location = this.capital_scope

	trigger = {
		this = { is_origin_payback = yes }
		from = { is_country_type = debt_collectors }
		FromFromFrom = { NOT = { has_fleet_flag = marked_for_deletion } }
	}

	immediate = {
		remove_country_flag = is_fighting_debt_collectors
		set_country_flag = payback_debt_collectors_chain_refused_pay_won
		fromFromFrom = {
			set_fleet_flag = marked_for_deletion
			delete_fleet = this
		}
		change_variable = {
			which = debt_collector_defeats
			value = 1
		}
		# Reset the timer and fires the follow-up after 15 years
		hidden_effect = {
			set_saved_date = {
				key = payback_debt_collectors_timer
				days_from_present = 5400
				expires = 3180060
			}
			country_event = { id = origin.4029 days = 5400 }
		}
	}

	option = {
		name = EXCELLENT
		custom_tooltip = "origin.4017.a.tooltip"
	}

	after = {
		hidden_effect = {
			# If this was your second meeting, fire the follow-up event
			if = {
				limit = {
					check_variable = {
						which = debt_collectors_visits
						value = 2
					}
				}
				hidden_effect = {
					country_event = { id = origin.4040 days = 15 }
				}
			}
			# If you kicked them three times, a very angry MSI contacts you
			else_if = {
				limit = {
					check_variable = {
						which = debt_collector_defeats
						value = 3
					}
				}
				hidden_effect = {
					country_event = { id = origin.4021 days = 15 }
				}	
			}
		}
	}
}
country_event = {
	id = origin.4021
	title = "origin.4021.name"
	desc = "origin.4021.desc"
	is_triggered_only = yes
	diplomatic = yes
	picture_event_data = {
		portrait = event_target:MSI_species
		room = slaver_room
	}

	trigger = {
		exists = event_target:MSI_country
		is_origin_payback = yes
		has_event_chain = "payback_debt_collectors_chain"
		check_variable = {
			which = debt_collector_defeats
			value = 3
		}
	}

	immediate = {
		# Establish communications in the improbable case you haven't encountered the MSI yet
		establish_communications_no_message = event_target:MSI_country
		event_target:MSI_country = {
			species = {
				save_event_target_as = MSI_species
			}
		}
	}

	option = {
		name = "origin.4021.a"
		# If you're already their vassal, they impose harsher conditions
		if = {
			limit = {
				is_subject = yes
				has_overlord = event_target:MSI_country
			}
			random_agreement = {
				limit = {
					owner = { is_same_value = event_target:MSI_country }
					target = { is_same_value = root }
				}
				set_agreement_preset = {
					preset = preset_payback_subsidiary_oppressive
					apply_terms = yes
				}
			}
		}
		# If not, they try to humiliate you
		else = {
			event_target:MSI_country = {
				declare_war = {
					target = prev
					attacker_war_goal = wg_payback_msi_humiliation
				}
			}
		}
	}
}
country_event = {
	id = origin.4022
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		this = { NOT = { is_origin_payback = yes } }
		from = { is_country_type = debt_collectors }
		FromFromFrom = { NOT = { has_fleet_flag = marked_for_deletion } }
		any_playable_country = {
			is_origin_payback = yes
			has_country_flag = is_fighting_debt_collectors
		}
	}

	immediate = {
		random_playable_country = {
			limit = {
				is_origin_payback = yes
				has_country_flag = is_fighting_debt_collectors
			}
			country_event = { id = origin.4020 scopes = { FromFrom = FromFrom FromFromFrom = FromFromFrom From = From } }
		}
	}
}
planet_event = {
	id = origin.4025
	title = "origin.4025.name"
	desc = "origin.4025.desc"
	picture = GFX_evt_burning_city
	show_sound = event_air_raid_siren
	is_triggered_only = yes
	location = this

	trigger = {
		planet_devastation >= 15
		from = { is_country_type = debt_collectors }
		owner = {
			is_origin_payback = yes
			has_event_chain = payback_debt_collectors_chain
		}
	}

	immediate = {
		from = {
			random_controlled_fleet = {
				limit = { has_fleet_flag = debt_collectors_raiding_fleet }
				set_fleet_flag = marked_for_deletion
				delete_fleet = this
			}
		}
		hidden_effect = {
			# resettle 5 pops to the MSI capital
			while = {
				count = 5
				random_owned_pop = {
					limit = {
						is_same_species = owner_main_species
					}
					resettle_pop = {
						pop = this
						planet = event_target:MSI_country.capital_scope
					}
				}
			}
		}
		owner = {
			remove_country_flag = is_fighting_debt_collectors
			# Reset the timer and fires the follow-up after 15 years
			hidden_effect = {
				set_saved_date = {
					key = payback_debt_collectors_timer
					days_from_present = 5400
					expires = 3180060
				}
				country_event = { id = origin.4029 days = 5400 }
			}
			set_country_flag = payback_debt_collectors_chain_refused_pay_lost
			add_modifier = {
				modifier = payback_gave_up_pop
				days = 1800
			}
		}
	}

	option = {
		name = "origin.4025.a"
		custom_tooltip = "origin.4025.a.tooltip"
	}

	after = {
		hidden_effect = {
			# If this was your second meeting, fire the follow-up event
			owner = {
				if = {
					limit = {
						check_variable = {
							which = debt_collectors_visits
							value = 2
						}
					}
					country_event = { id = origin.4040 days = 15 }
				}
			}
		}
	}
}
country_event = {
	id = origin.4029
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		exists = event_target:MSI_country
		is_origin_payback = yes
		has_event_chain = payback_debt_collectors_chain
		NOT = { has_country_flag = payback_revenge_complete }
	}

	immediate = {
		# Why the extra hidden event? Because the hub event (origin.4030) is used as a base by other events,
		# so the immediate/after blocks would get repeated every time an option is picked,
		# increasing the variable.
		# We use this variable to scale their fleet power depending on game years, so it gets updated
		# even if they don't show up because you're at war.
		change_variable = {
			which = debt_collectors_visits
			value = 1
		}
		# If you're fighting the MSI, check again after 5 years to see if the war has ended
		if = {
			limit = {
				is_at_war_with = event_target:MSI_country
			}
			set_saved_date = {
				key = payback_debt_collectors_timer
				days_from_present = 1800
				expires = 3180060
			}
			country_event = { id = origin.4029 days = 1800 }

		}
		# If you're NOT currently fighting the MSI, the debt collectors show up as normal
		else = {
			# Reset some flags
			remove_country_flag = payback_debt_collectors_chain_refused_pay_won
			remove_country_flag = payback_debt_collectors_chain_refused_pay_lost
			# Fire the event
			country_event = { id = origin.4030 }
		}
	}
}
country_event = {
	id = origin.4030
	title = "origin.4030.name"
	desc = {
		text = "origin.4030.desc.energy"
		trigger = {
			has_country_flag = debt_collectors_pay_energy
		}
	}
	desc = {
		text = "origin.4030.desc.consumer_goods"
		trigger = {
			has_country_flag = debt_collectors_pay_consumer_goods
		}
	}
	desc = {
		text = "origin.4030.desc.alloys"
		trigger = {
			has_country_flag = debt_collectors_pay_alloys
		}
	}
	desc = {
		text = "origin.4030.desc.pops"
		trigger = {
			has_country_flag = debt_collectors_pay_slaves
		}
	}
	desc = {
		text = "origin.4030.desc.defeated"
		trigger = {
			has_country_flag = fought_debt_collectors_last_time
			check_variable = {
				which = debt_collector_defeats
				value <= 2
			}
		}
	}
	desc = {
		text = "origin.4030.desc.furious"
		trigger = {
			has_country_flag = fought_debt_collectors_last_time
			check_variable = {
				which = debt_collector_defeats
				value > 2
			}
		}
	}
	is_triggered_only = yes
	diplomatic = yes
	picture_event_data = {
		portrait = event_target:debt_collectors_species
		room = ethic_spaceship_room
	}

	trigger = {
		is_origin_payback = yes
		has_event_chain = "payback_debt_collectors_chain"
	}

	option = { # We are willing to settle this time
		name = "origin.4030.a"
		trigger = {
			NOT = { has_country_flag = debt_collectors_agreed_to_pay }
		}
		hidden_effect = {
			country_event = { id = origin.4016 }
		}
	}

	option = { # Pay with energy
		name = "origin.4030.b"
		trigger = {
			has_country_flag = debt_collectors_pay_energy
		}
		allow = {
			resource_stockpile_compare = {
				resource = energy
				value >= 5000
			}
		}
		add_resource = {
			energy = -5000
		}
		hidden_effect = {	
			country_event = { id = origin.4031 }
		}
	}

	option = { # Pay with consumer goods
		name = "origin.4030.b"
		trigger = {
			has_country_flag = debt_collectors_pay_consumer_goods
		}
		allow = {
			resource_stockpile_compare = {
				resource = consumer_goods
				value >= 2500
			}
		}
		add_resource = {
			consumer_goods = -2500
		}
		hidden_effect = {	
			country_event = { id = origin.4031 }
		}
	}

	option = { # Pay with alloys
		name = "origin.4030.b"
		trigger = {
			has_country_flag = debt_collectors_pay_alloys
		}
		allow = {
			resource_stockpile_compare = {
				resource = alloys
				value >= 1250
			}
		}
		add_resource = {
			alloys = -1250
		}
		hidden_effect = {	
			country_event = { id = origin.4031 }
		}
	}

	option = { # Pay with your own people
		name = "origin.4030.c"
		trigger = {
			has_country_flag = debt_collectors_pay_slaves
		}
		allow = {
			count_owned_pop = {
				limit = {
					is_same_species = owner_main_species
				}
				count > 5
			}
		}
		custom_tooltip = origin.4030.c.tooltip
		hidden_effect = {
			# resettle 2 pops to the MSI capital
			while = {
				count = 2
				random_owned_pop = {
					limit = {
						is_same_species = owner_main_species
					}
					resettle_pop = {
						pop = this
						planet = event_target:MSI_country.capital_scope
					}
				}
			}
			country_event = { id = origin.4031 }
		}
	}

	option = { # Pay with slaves
		name = "origin.4030.d"
		trigger = {
			has_country_flag = debt_collectors_pay_slaves
		}
		allow = {
			count_owned_pop = {
				limit = {
					is_enslaved = yes
				}
				count >= 2
			}
		}
		custom_tooltip = origin.4030.d.tooltip
		hidden_effect = {
			# resettle 2 pops to the MSI capital
			while = {
				count = 2
				random_owned_pop = {
					limit = {
						is_enslaved = yes
					}
					resettle_pop = {
						pop = this
						planet = event_target:MSI_country.capital_scope
					}
				}
			}
			country_event = { id = origin.4031 }
		}
	}

	option = { # Can't pay - energy
		name = "origin.4030.e"
		trigger = {
			OR = {
				AND = {
					has_country_flag = debt_collectors_pay_energy
					resource_stockpile_compare = {
						resource = energy
						value < 5000
					}
				}
				AND = {
					has_country_flag = debt_collectors_pay_alloys
					resource_stockpile_compare = {
						resource = alloys
						value < 1250
					}
				}
				AND = {
					has_country_flag = debt_collectors_pay_consumer_goods
					resource_stockpile_compare = {
						resource = consumer_goods
						value < 2500
					}
				}
			}
		}
		hidden_effect = {
			country_event = { id = origin.4036 }
		}
	}

	option = { # Won't pay
		name = "origin.4030.f"
		hidden_effect = {
			country_event = { id = origin.4037 }
		}
	}

	option = { # Who are you again?
		name = "origin.4030.g"
		response_text = "origin.4015.c.response"
		is_dialog_only = yes
	}
}
country_event = {
	id = origin.4050
	title = origin.4050.name
	desc = origin.4050.desc
	picture = GFX_evt_slaver_empire
	show_sound = event_power_down
	is_triggered_only = yes

	trigger = {
		is_origin_payback = yes
		has_event_chain = payback_make_them_pay_words_chain
		NOT = { has_country_flag = joined_galcom_first_time }
	}

	immediate = {
		set_country_flag = joined_galcom_first_time
	}

	option = {
		name = origin.4050.a
		custom_tooltip = origin.4050.a.tooltip
		hidden_effect = {
			end_event_chain = payback_make_them_pay_words_chain
			begin_event_chain = {
				event_chain = payback_make_them_pay_words_1_chain
				target = this
			}
		}
	}

	option = {
		name = origin.4050.b
		custom_tooltip = origin.4050.b.tooltip
		hidden_effect = {
			end_event_chain = payback_make_them_pay_words_chain
			begin_event_chain = {
				event_chain = payback_make_them_pay_words_2_chain
				target = this
			}
		}
	}

	after = {
		# Check if relevant resolutions while you weren't in the galcom and update the triggers accordingly
		## Variant 1 - Equal STanding
		if = {
			limit = {
				has_event_chain = payback_make_them_pay_words_1_chain
			}
			payback_words_chain_counters_check_joining_galcom = {
				CHAIN = payback_make_them_pay_words_1_chain
			}
		}
		## Variant 2 - Non-interference
		if = {
			limit = {
				has_event_chain = payback_make_them_pay_words_2_chain
			}
			payback_words_chain_counters_check_joining_galcom = {
				CHAIN = payback_make_them_pay_words_2_chain
			}				
		}
	}
}
country_event = {
	id = origin.4051
	
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		any_galcom_member = {
			is_origin_payback = yes
			has_country_flag = payback_use_words
		}
		OR = {
			last_resolution_changed = resolution_sanctions_tech_1
			last_resolution_changed = resolution_sanctions_economic_1
			last_resolution_changed = resolution_sanctions_military_1
			last_resolution_changed = resolution_sanctions_administrative_1
		}
	}

	immediate = {
		every_galcom_member = {
			limit = {
				is_origin_payback = yes
				has_country_flag = payback_use_words
				OR = {
					has_event_chain = payback_make_them_pay_words_1_chain
					has_event_chain = payback_make_them_pay_words_2_chain
				}
			}
			## Variant 1 - Equal Standing
			if = {
				limit = {
					has_event_chain = payback_make_them_pay_words_1_chain
				}
				# Add a point to the relevant event chain
				add_event_chain_counter = {
					event_chain = payback_make_them_pay_words_1_chain
					counter = "sanctions_passed"
					amount = 1
				}
				payback_resolution_counters_check = {
					CHAIN = payback_make_them_pay_words_1_chain
					RESOLUTION = equal_standing_passed
				}
			}
			## Variant 2 - Non-interference
			if = {
				limit = {
					has_event_chain = payback_make_them_pay_words_2_chain
				}
				# Add a point to the relevant event chain
				add_event_chain_counter = {
					event_chain = payback_make_them_pay_words_2_chain
					counter = "sanctions_passed"
					amount = 1
				}
				payback_resolution_counters_check = {
					CHAIN = payback_make_them_pay_words_2_chain
					RESOLUTION = non_interference_passed
				}				
			}
		}
	}
}
country_event = {
	id = origin.4052
	title = origin.4052.name
	desc = origin.4052.desc
	picture = GFX_evt_galactic_community
	show_sound = event_power_down
	is_triggered_only = yes

	trigger = {
		is_origin_payback = yes
		has_country_flag = payback_use_words
		NOT = { has_country_flag = payback_revenge_words_first_resolution_passed }
	}

	immediate = {
		set_country_flag = payback_revenge_words_first_resolution_passed
	}

	option = {
		name = EXCELLENT
		add_monthly_resource_mult = {
			resource = unity
			value = @tier3unityreward
			min = @tier3unitymin
			max = @tier3unitymax
		}
	}
}
country_event = {
	id = origin.4053
	
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		any_galcom_member = {
			is_origin_payback = yes
			has_country_flag = payback_use_words
		}
		OR = {
			last_resolution_changed = resolution_pre_ftl_stances_equal_standing
			last_resolution_changed = resolution_pre_ftl_stances_non_interference
		}
	}

	immediate = {
		every_galcom_member = {
			limit = {
				is_origin_payback = yes
				has_country_flag = payback_use_words
				OR = {
					has_event_chain = payback_make_them_pay_words_1_chain
					has_event_chain = payback_make_them_pay_words_2_chain
				}
			}
			## Variant 1 - Equal STanding
			if = {
				limit = {
					has_event_chain = payback_make_them_pay_words_1_chain
				}
				# Add a point to the relevant event chain
				add_event_chain_counter = {
					event_chain = "payback_make_them_pay_words_1_chain"
					counter = "equal_standing_passed"
					amount = 1
				}
				payback_resolution_counters_check = {
					CHAIN = payback_make_them_pay_words_1_chain
					RESOLUTION = equal_standing_passed
				}
			}
			## Variant 2 - Non-interference
			if = {
				limit = {
					has_event_chain = payback_make_them_pay_words_2_chain
				}
				# Add a point to the relevant event chain
				add_event_chain_counter = {
					event_chain = "payback_make_them_pay_words_2_chain"
					counter = "non_interference_passed"
					amount = 1
				}
				payback_resolution_counters_check = {
					CHAIN = payback_make_them_pay_words_2_chain
					RESOLUTION = non_interference_passed
				}				
			}
		}
	}
}
country_event = {
	id = origin.4057
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		OR = {
			last_resolution_changed = resolution_sanctions_tech_repeal_1
			last_resolution_changed = resolution_sanctions_economic_repeal_1
			last_resolution_changed = resolution_sanctions_military_repeal_1
			last_resolution_changed = resolution_sanctions_administrative_repeal_1
		}
		any_galcom_member = {
			OR = {
				has_event_chain = payback_make_them_pay_words_1_chain
				has_event_chain = payback_make_them_pay_words_2_chain
			}
		}
	}

	immediate = {
		every_galcom_member = {
			limit = {
				is_origin_payback = yes
				has_country_flag = payback_use_words
				OR = {
					has_event_chain = payback_make_them_pay_words_1_chain
					has_event_chain = payback_make_them_pay_words_2_chain
				}
			}
			## Variant 1
			if = {
				limit = {
					has_event_chain = payback_make_them_pay_words_1_chain
				}
				# Add a point to the relevant event chain
				add_event_chain_counter = {
					event_chain = "payback_make_them_pay_words_1_chain"
					counter = "sanctions_passed"
					amount = -1
				}
			}
			## Variant 2
			if = {
				limit = {
					has_event_chain = payback_make_them_pay_words_2_chain
				}
				# Add a point to the relevant event chain
				add_event_chain_counter = {
					event_chain = "payback_make_them_pay_words_2_chain"
					counter = "sanctions_passed"
					amount = -1
				}
			}
		}
	}
}
country_event = {
	id =  origin.4060
	title = origin.4060.name
	desc = origin.4060.desc
	picture = GFX_evt_victorious_army
	show_sound = event_power_down
	is_triggered_only = yes

	trigger = {
		fromfrom = {
			OR = {
				using_war_goal = {
					type = wg_payback_wipe_them_out
					owner = root
				}
				using_war_goal = {
					type = wg_payback_force_ideology
					owner = root
				}
				using_war_goal = {
					type = wg_payback_tribute
					owner = root
				}
				using_war_goal = {
					type = wg_payback_megacorp_subjugate
					owner = root
				}
			}
		}
		if = {
			limit = {
				exists = from
			}
			from = {
				has_origin = origin_slavers
			}
		}
		is_origin_payback = yes
		has_event_chain = payback_make_them_pay_swords_chain
	}

	immediate = {
		set_country_flag = payback_revenge_complete
		if = {
			limit = {
				fromfrom = {
					using_war_goal = {
						type = wg_payback_force_ideology
						owner = root
					}
				}
			}
			set_country_flag = pacified_MSI
		}
	}

	option = {
		name = origin.4060.a
		add_modifier = {
			modifier = payback_no_revenge
		}
	}

	option = {
		name = origin.4060.b
		trigger = {
			allows_slavery = no
		}
		custom_tooltip = origin.4060.b.tooltip
		set_country_flag = payback_punish_slavers
	}

	after = {
		end_event_chain = payback_make_them_pay_swords_chain
		end_event_chain = payback_debt_collectors_chain
		set_country_flag = with_interest_achievement
		# If you won using force ideology, they collapse
		if = {
			limit = {
				has_country_flag = pacified_MSI
			}
			country_event = { id = origin.4056 days = 15 }
		}
	}
}
country_event = {
	id =  origin.4061
	title = origin.4060.name
	desc = origin.4060.desc
	picture = GFX_evt_victorious_army
	show_sound = event_power_down
	is_triggered_only = yes

	trigger = {
		is_origin_payback = yes
		has_event_chain = payback_make_them_pay_swords_chain
		has_country_flag = payback_killed_MSI
	}

	immediate = {
		set_country_flag = payback_revenge_complete
	}

	option = {
		name = origin.4060.a
		add_modifier = {
			modifier = payback_no_revenge
		}
	}

	option = {
		name = origin.4060.b
		trigger = {
			allows_slavery = no
		}
		custom_tooltip = origin.4060.b.tooltip
		set_country_flag = payback_punish_slavers
	}

	after = {
		end_event_chain = payback_make_them_pay_swords_chain
		end_event_chain = payback_debt_collectors_chain
		set_country_flag = with_interest_achievement
	}
}
country_event = {
	id =  origin.4070
	title = origin.4070.name
	desc = origin.4070.desc
	picture = GFX_evt_slaver_empire
	show_sound = event_space_battle
	is_triggered_only = yes

	trigger = {
		is_origin_payback = yes
		has_country_flag = payback_stolen_revenge
		NOT = { has_country_flag = payback_revenge_complete }
	}

	option = {
		name = origin.4070.a
		add_modifier = {
			modifier = payback_no_revenge_small
		}
		set_country_flag = payback_revenge_complete
	}

	option = {
		name = origin.4070.b
		trigger = {
			OR = {
				has_event_chain = payback_make_them_pay_words_chain
				has_event_chain = payback_make_them_pay_words_1_chain
				has_event_chain = payback_make_them_pay_words_2_chain
			}
		}
		custom_tooltip = origin.4070.b.tooltip
	}

	option = {
		name = origin.4070.c
		trigger = {
			exists = event_target:destroyer_country
			NOR = {
				has_event_chain = payback_make_them_pay_words_chain
				has_event_chain = payback_make_them_pay_words_1_chain
				has_event_chain = payback_make_them_pay_words_2_chain
			}
		}
		# if MSI got destroyed by a crisis, get a modifier against them
		if = {
			limit = {
				event_target:destroyer_country = {
					is_crisis_faction = yes
				}
			}
			add_modifier = {
				modifier = payback_underdog
			}
			end_event_chain = payback_make_them_pay_swords_chain
		}
		# if MSI got destroyed by the khan, get a modifier against them
		else_if = {
			limit = {
				event_target:destroyer_country = {
					is_country_type = awakened_marauders
				}
			}
			add_modifier = {
				modifier = payback_underdog_khan
			}
			end_event_chain = payback_make_them_pay_swords_chain
		}
		# if not, the destroyer country becomes the new target of your revenge
		else_if = {
			limit = {
				OR = {
					is_country_type = default
					is_country_type = fallen_empire
					is_country_type = awakened_fallen_empire
				}
			}
			event_target:destroyer_country = {
				set_country_flag = payback_stole_revenge
				save_global_event_target_as = payback_stole_revenge_country
			}
			# If the rare case the MSI gets destroyed before you can start your revenge, get the event chain now
			if = {
				limit = {
						NOT = { has_event_chain = payback_make_them_pay_swords_chain }
					}
				begin_event_chain = {
					event_chain = payback_make_them_pay_swords_chain
					target = ROOT
				}
			}
			custom_tooltip = origin.4070.d.tooltip
		}
	}

	after = {
		remove_country_flag = payback_stolen_revenge
		end_event_chain = payback_debt_collectors_chain
	}
}
country_event = {
	id =  origin.4071
	title = origin.4071.name
	desc = origin.4071.desc
	picture = GFX_evt_victorious_army
	show_sound = event_space_battle
	is_triggered_only = yes

	trigger = {
		fromfrom = {
			OR = {
				using_war_goal = {
					type = wg_payback_wipe_them_out
					owner = root
				}
				using_war_goal = {
					type = wg_payback_force_ideology
					owner = root
				}
				using_war_goal = {
					type = wg_payback_tribute
					owner = root
				}
				using_war_goal = {
					type = wg_payback_megacorp_subjugate
					owner = root
				}
			}
		}
		from = {
			has_country_flag = payback_stole_revenge
		}
		is_origin_payback = yes
		has_event_chain = payback_make_them_pay_swords_chain
	}

	immediate = {
		set_country_flag = payback_revenge_complete
	}

	option = {
		name = origin.4070.a
		add_modifier = {
			modifier = payback_no_revenge
		}
	}

	option = {
		name = origin.4071.a
		custom_tooltip = origin.4060.b.tooltip
		set_country_flag = payback_punish_slavers
	}

	after = {
		end_event_chain = payback_make_them_pay_swords_chain
	}
}
country_event = {
	id =  origin.4109
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_origin_payback = yes
		any_playable_country = {
			is_origin_broken_shackles = yes
			NOT = { has_country_flag = broken_shackles_recognized_payback@root }
			has_communications = root
		}
	}

	immediate = {
		random_playable_country = {
			limit = {
				is_origin_broken_shackles = yes
				NOT = { has_country_flag = broken_shackles_recognized_payback@root }
				has_communications = root
			}
			save_event_target_as = bsempire
		}
		country_event = { id = origin.4110 days = 90 random = 360 }
	}
}
country_event = {
	id =  origin.4110
	title = origin.4110.name
	desc = origin.4110.desc
	picture = GFX_evt_broken_shackles
	show_sound = event_conversation
	is_triggered_only = yes

	trigger = {
		is_origin_payback = yes
	}

	immediate = {
		set_country_flag = payback_recognized_broken_shackles@event_target:bsempire
		event_target:bsempire = {
			set_country_flag = broken_shackles_recognized_payback@root
		}
	}

	option = {
		name = {
			text = origin.4110.a.phile
			trigger = {
				is_xenophobe = no
			}
		}
		name = {
			text = origin.4110.a.phobe
			trigger = {
				is_xenophobe = yes
			}
		}
		add_monthly_resource_mult = {
			resource = unity
			value = @tier2materialreward
			min = @tier2materialmin
			max = @tier2materialmax
		}
	}

	after = {
		add_opinion_modifier = {
			modifier = opinion_fellow_slaves
			who = event_target:bsempire
		}
		event_target:bsempire = {
			add_opinion_modifier = {
				modifier = opinion_fellow_slaves
				who = root
			}
		}
	}
}
country_event = {
	id = origin.4120
	title = "origin.4120.name"
	desc = "origin.4120.desc"
	is_triggered_only = yes
	diplomatic = yes
	picture_event_data = {
		portrait = event_target:broken_shackles_empire
		planet_background = event_target:broken_shackles_empire
		graphical_culture = event_target:broken_shackles_empire
		city_level = event_target:broken_shackles_empire
		room = event_target:broken_shackles_empire
	}

	trigger = {
		exists = event_target:MSI_country
		is_origin_payback = yes
		NOT = { has_country_flag = origin_4120_fired }
		any_playable_country = {
			is_origin_broken_shackles = yes
			has_country_flag = broken_shackles_recognized_payback@root
			has_communications = root
		}
	}

	immediate = {
		set_country_flag = origin_4120_fired
		random_playable_country = {
			limit = {
				is_origin_broken_shackles = yes
				has_country_flag = broken_shackles_recognized_payback@root
				has_communications = root
			}
			save_event_target_as = broken_shackles_empire
		}
	}

	option = {
		name = "origin.4120.a"
		add_intel = {
			who = event_target:MSI_country
			amount = 50
		}
		event_target:broken_shackles_empire = {
			add_intel = {
				who = event_target:MSI_country
				amount = 50
			}
		}
	}

	option = {
		name = "origin.4120.b"
	}
}
country_event = {
	id = origin.4130
	title = "origin.4130.name"
	desc = "origin.4130.desc"
	is_triggered_only = yes
	diplomatic = yes
	picture_event_data = {
		portrait = event_target:broken_shackles_empire
		planet_background = event_target:broken_shackles_empire
		graphical_culture = event_target:broken_shackles_empire
		city_level = event_target:broken_shackles_empire
		room = event_target:broken_shackles_empire
	}

	trigger = {
		is_origin_payback = yes
		is_galactic_community_member = yes
		NOT = { has_country_flag = origin_4130_fired }
		any_playable_country = {
			is_origin_broken_shackles = yes
			has_country_flag = broken_shackles_recognized_payback@root
			has_communications = prev
			is_galactic_community_member = yes
		}
	}

	immediate = {
		set_country_flag = origin_4130_fired
		random_playable_country = {
			limit = {
				is_origin_broken_shackles = yes
				has_country_flag = broken_shackles_recognized_payback@root
				has_communications = prev
			}
			save_event_target_as = broken_shackles_empire
		}
	}

	option = {
		name = "origin.4130.a"
		event_target:broken_shackles_empire = {
			add_favors = {
				target = root
				value = 5
			}
		}
		add_favors = {
			target = event_target:broken_shackles_empire
			value = 5
		}
	}

	option = {
		name = "origin.4130.b"
	}
}
country_event = {
	id = origin.4140
	title = "origin.4140.name"
	desc = "origin.4140.desc"
	is_triggered_only = yes
	diplomatic = yes
	picture_event_data = {
		portrait = event_target:broken_shackles_empire
		planet_background = event_target:broken_shackles_empire
		graphical_culture = event_target:broken_shackles_empire
		city_level = event_target:broken_shackles_empire
		room = event_target:broken_shackles_empire
	}

	trigger = {
		exists = event_target:MSI_country
		is_origin_payback = yes
		has_event_chain = payback_make_them_pay_swords_chain
		NOT = { has_country_flag = origin_4140_fired }
		any_playable_country = {
			is_origin_broken_shackles = yes
			has_country_flag = broken_shackles_recognized_payback@root
			has_communications = prev
		}
	}

	immediate = {
		set_country_flag = origin_4140_fired
		random_playable_country = {
			limit = {
				is_origin_broken_shackles = yes
				has_country_flag = broken_shackles_recognized_payback@root
				has_communications = prev
			}
			save_event_target_as = broken_shackles_empire
		}
	}

	option = {
		name = "origin.4140.a"
		event_target:broken_shackles_empire = {
			set_country_flag = payback_bs_will_join_war
		}
	}
}
country_event = {
	id = origin.4141
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		from = {
			OR = {
				using_war_goal = {
					type = wg_payback_wipe_them_out
					owner = root
				}
				using_war_goal = {
					type = wg_payback_force_ideology
					owner = root
				}
				using_war_goal = {
					type = wg_payback_tribute
					owner = root
				}
				using_war_goal = {
					type = wg_payback_megacorp_subjugate
					owner = root
				}
			}
		}
		is_origin_payback = yes
		has_event_chain = payback_make_them_pay_swords_chain
		any_playable_country = {
			is_origin_broken_shackles = yes
			has_country_flag = payback_bs_will_join_war
		}
	}

	immediate = {
		random_playable_country = {
			limit = {
				is_origin_broken_shackles = yes
				has_country_flag = payback_bs_will_join_war
			}
			join_war_on_side = {
				war = from
				side = root
			}
		}
	}
}
country_event = {
	id = origin.4149
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_country_type = default
		is_origin_payback = yes
		exists = event_target:MSI_country
		has_communications = event_target:MSI_country
		has_event_chain = payback_debt_collectors_chain
		NOR = {
			has_country_flag = origin_4149_fired
			has_country_flag = fought_debt_collectors_last_time
			has_country_flag = payback_revenge_complete
		}
		from = {
			is_guardian_country = yes
		}
	}

	immediate = {
		set_country_flag = origin_4149_fired
		country_event = { id = origin.4150 days = 15 }
	}
}
country_event = {
	id = origin.4150
	title = "origin.4130.name"
	desc = "origin.4150.desc"
	is_triggered_only = yes
	diplomatic = yes
	picture_event_data = {
		portrait = event_target:MSI_country.species
		room = slaver_room
	}

	trigger = {
		is_origin_payback = yes
		exists = event_target:MSI_country
		has_communications = event_target:MSI_country
		has_event_chain = payback_debt_collectors_chain
		NOR = {
			has_country_flag = fought_debt_collectors_last_time
			has_country_flag = payback_revenge_complete
		}
	}

	option = {
		name = "origin.4150.a"
		add_monthly_resource_mult = {
			resource = energy
			value = @tier3materialreward
			min = @tier3materialmin
			max = @tier3materialmax
		}
	}

	option = {
		name = "origin.4150.b"
		add_monthly_resource_mult = {
			resource = unity
			value = @tier1materialreward
			min = @tier1materialmin
			max = @tier1materialmax
		}
	}
}
country_event = {
	id = origin.4160
	title = "origin.4130.name"
	desc = "origin.4160.desc"
	is_triggered_only = yes
	diplomatic = yes
	picture_event_data = {
		portrait = event_target:MSI_country.species
		room = slaver_room
	}

	trigger = {
		is_origin_payback = yes
		exists = event_target:MSI_country
		has_communications = event_target:MSI_country
		has_event_chain = payback_debt_collectors_chain
		NOR = {
			has_country_flag = fought_debt_collectors_last_time
			has_country_flag = origin_4160_fired
			has_country_flag = payback_revenge_complete
		}
	}

	immediate = {
		set_country_flag = origin_4160_fired
	}

	option = {
		name = "origin.4160.a"
		add_modifier = {
			modifier = payback_student
		}
	}

	option = {
		name = "origin.4160.b"
		add_monthly_resource_mult = {
			resource = unity
			value = @tier1materialreward
			min = @tier1materialmin
			max = @tier1materialmax
		}
	}
}
situation_event = {
	id = origin.4170
	title = "origin.4130.name"
	desc = "origin.4170.desc"
	is_triggered_only = yes
	diplomatic = yes
	picture_event_data = {
		portrait = event_target:MSI_country.species
		room = slaver_room
	}

	trigger = {
		owner = {
			is_origin_payback = yes
			exists = event_target:MSI_country
			has_communications = event_target:MSI_country
			has_event_chain = payback_debt_collectors_chain
			NOR = {
				has_country_flag = fought_debt_collectors_last_time
				has_country_flag = origin_4170_recently_fired
				has_country_flag = payback_revenge_complete
			}
			any_situation = {
				OR = {
					is_situation_type = situation_energy_deficit
					is_situation_type = situation_mineral_deficit
					is_situation_type = situation_food_deficit
					is_situation_type = situation_consumer_goods_deficit
					is_situation_type = situation_alloys_deficit
				}
			}
		}
	}

	immediate = {
		owner = {
			set_timed_country_flag = {
				flag = origin_4170_recently_fired
				days = 1800	# 5 years
			}
		}
	}

	option = {
		name = "origin.4170.a"
		owner = {
			switch = {
				trigger = has_deficit
				energy = {
					add_resource = {
						energy = 1000
					}
				}
				minerals = {
					add_resource = {
						minerals = 1000
					}
				}
				food = {
					add_resource = {
						food = 1000
					}
				}
				consumer_goods = {
					add_resource = {
						consumer_goods = 500
					}
				}
				alloys = {
					add_resource = {
						alloys = 500
					}
				}
			}
		}
	}

	option = {
		name = "origin.4170.b"
		owner = {
			add_monthly_resource_mult = {
				resource = unity
				value = @tier1materialreward
				min = @tier1materialmin
				max = @tier1materialmax
			}
		}
	}
}
country_event = {
	id =  origin.4300
	title = origin.4300.name
	desc = {
		trigger = {
			AND = {
				has_country_flag = has_encountered_other_empire 
				is_xenophile = yes
			}
		}
		text = origin.4300.aliens.phile.desc
	}
	desc = {
		trigger = {
			AND = {
				has_country_flag = has_encountered_other_empire 
				is_xenophobe = yes
			}
		}
		text = origin.4300.aliens.phobe.desc
	}
	desc = {
		trigger = {
			NOR = { 
				has_country_flag = has_encountered_other_empire
				is_xenophobe = yes
			}
		}
		text = origin.4300.noaliens.desc
	}
	picture = GFX_evt_emergency_workers
	show_sound = event_power_down
	is_triggered_only = yes
	location = home_planet

	trigger = {
		is_origin_payback = yes
		NOT = {
			has_country_flag = payback_had_out_of_warranty
			has_technology = tech_frontier_health
		}
		home_planet = {
			original_owner = yes
			has_building = building_clinic
		}
	}

	immediate = {
		set_country_flag = payback_had_out_of_warranty
		set_country_flag = payback_ruined_gene_clinics # prevents origin.4306 from firing upon gaining the tech
		home_planet = {
			ruin_building = building_clinic
		}
	}

	option = { # Attempt to repair the clinics
		name = origin.4300.a
		begin_event_chain = {
			event_chain = payback_out_of_warranty_chain
			target = this
		}
		custom_tooltip = origin.4300.a.tooltip
	}

	option = { # Repurpose clinics (Autochthon Monument/Sanctuary of Repose)
		name = origin.4300.b
		allow = {
			resource_stockpile_compare = {
				resource = minerals
				value >= 100
			}
		}
		if = {
			limit = { is_memorialist_empire = yes }
			custom_tooltip = origin.4300.b.memorialist.tooltip
		}
		else = {
			custom_tooltip = origin.4300.b.tooltip
		}
		add_resource = {
			minerals = -100
		}
		home_planet = {
			planet_event = { id = origin.4304 days = 15 }
		}
	}

	after = {
		hidden_effect = {
			# follow-up where healthcare is getting worse and the population is not happy about it
			country_event = { id = origin.4305 days = 360 random = 180 }
		}
	}
}
country_event = {
	id =  origin.4306
	title = origin.4306.name
	desc = origin.4306.desc
	picture = GFX_evt_genetic_modification
	show_sound = event_celebration
	is_triggered_only = yes

	trigger = {
		is_origin_payback = yes
		has_country_flag = payback_ruined_gene_clinics
		last_increased_tech = tech_frontier_health
	}

	option = {
		name = EXCELLENT
		end_event_chain = payback_out_of_warranty_chain
		add_monthly_resource_mult = {
			resource = unity
			value = @tier2unityreward
			min = @tier2unitymin
			max = @tier2unitymax
		}
		remove_modifier = payback_declining_healthcare
	}
}
country_event = {
	id = origin.4900
	title = "origin.4900.name"
	desc = "origin.4900.desc"
	picture = GFX_evt_payback
	show_sound = event_dig_site
	is_triggered_only = yes
	location = capital_scope

	trigger = {
		is_origin_payback = yes
		NOT = { has_country_flag = payback_starting_dig_site }
	}

	immediate = {
		set_country_flag = payback_starting_dig_site
	}

	option = {
		name = "origin.4900.a"
		enable_special_project = {
			name = "PAYBACK_KESSLER_EFFECT"
			location = capital_scope
			owner = root
		}
	}
}
ship_event = {
	id = origin.4934
	title = "origin.4934.name"
	desc = "origin.4934.desc"
	picture = GFX_evt_payback
	show_sound = event_dig_site
	is_triggered_only = yes
	location = owner.capital_scope

	trigger = {
		this.owner = { is_origin_payback = yes }
	}

	immediate = {
		solar_system = {
			every_system_ambient_object = {
				limit = {
					is_ambient_object_type = payback_site_ship_object
				}
				destroy_ambient_object = this
			}
			random_system_planet = {
				limit = { has_planet_flag = payback_site_planet }
				save_event_target_as = spawn_location
				remove_planet_flag = has_orbital_debris
			}
		}
	}

	option = {
		name = EXCELLENT
		custom_tooltip = origin.4934.tt
		owner = {
			create_payback_warship_effect = yes
		}
	}
}
ship_event = {
	id = origin.4935
	title = "origin.4935.name"
	desc = "origin.4935.desc"
	picture = GFX_evt_payback
	show_sound = event_dig_site
	is_triggered_only = yes
	location = owner.capital_scope

	trigger = {
		this.owner = { is_origin_payback = yes }
	}

	immediate = {
		solar_system = {
			every_system_ambient_object = {
				limit = {
					is_ambient_object_type = payback_site_ship_object
				}
				destroy_ambient_object = this
			}
			random_system_planet = {
				limit = { has_planet_flag = payback_site_planet }
				save_event_target_as = spawn_planet
				remove_planet_flag = has_orbital_debris
			}
		}
	}

	option = {
		name = EXCELLENT
		custom_tooltip = origin.4935.tt
		hidden_effect = {
			solar_system = {
				spawn_payback_site_habitat = yes
			}
		}
	}
}
country_event = {
	id = origin.4936
	title = "origin.4936.name"
	desc = "origin.4936.desc"
	picture = GFX_evt_payback
	show_sound = event_dig_site
	is_triggered_only = yes

	trigger = {
		is_origin_payback = yes
		OR = {
			last_increased_tech = tech_battleships
			last_increased_tech = tech_cruisers
			last_increased_tech = tech_destroyers
		}
		any_owned_ship = {
			has_ship_flag = payback_flagship
		}
		NOT = {
			has_special_project = UPGRADE_FLAGSHIP
		}
	}

	immediate = {
		random_owned_ship = {
			limit = {
				has_ship_flag = payback_flagship
			}
			save_event_target_as = payback_flagship
		}
	}

	option = {
		name = EXCELLENT
		custom_tooltip = origin.4936.tt
		enable_special_project = {
			name = "UPGRADE_FLAGSHIP"
			location = event_target:payback_flagship
			owner = ROOT
		}
	}
}
ship_event = {
	id = origin.4937
	title = "origin.4937.name"
	desc = "origin.4937.desc"
	picture = GFX_evt_payback
	show_sound = event_dig_site
	is_triggered_only = yes

	trigger = {
		owner = {
			is_origin_payback = yes
			any_owned_ship = {
				has_ship_flag = payback_flagship
			}
		}
	}

	immediate = {
		owner = {
			random_owned_ship = {
				limit = {
					has_ship_flag = payback_flagship
				}
				save_event_target_as = spawn_location
				if = {
					limit = {
						exists = leader
					}
					leader = {
						save_event_target_as = flagship_leader
						unassign_leader = this
					}
				}
			}
		}

	}

	option = {
		name = EXCELLENT
		custom_tooltip = origin.4937.tt
		owner = {
			create_payback_warship_effect = yes
		}
	}

	after = {
		delete_ship = event_target:spawn_location
	}
}
# fotd bad ending for RW
situation_event = {
	id = origin.6175
	title = origin.6175.name
	desc = origin.6175.desc

	show_sound = event_screams
	picture = GFX_evt_exploding_planet

	is_triggered_only = yes
	situation = this

	immediate = {
		target = {
			every_owned_pop = { kill_pop = yes }
			destroy_colony = yes
			if = {
				limit = {
					is_ringworld = yes
				}
				spawn_ringworld_cracker_effect = yes
				change_pc = pc_ringworld_seam_damaged
				create_ambient_object = {
					type = "medium_debris_01_object"
					entity_offset_height = -15
					location = this
				}
				last_created_ambient_object = {
					set_location = {
						target = prev
						distance = 0
						angle = 0
					}
				}
			}
			else_if = {
				limit = {
					is_planet_class = pc_habitat
				}
				spawn_habitat_cracker_effect = yes
				remove_planet = yes
			}
			else = { change_pc = pc_shattered }
			clear_deposits = yes
			add_deposit = d_alloys_10
		}
		owner = {
			random_planet_within_border = {
				limit = {
					has_planet_flag = fotd_seperatist_planet@root.owner
					owner = {
						has_country_flag = fotd_seperatist_country@root.owner
					}
				}
				set_owner = root
				set_capital = yes
			}
			end_event_chain = fotd_chain
		}
		event_target:fotd_seperatist_planet@owner = {
			save_event_target_as = fotd_seperatist_planet
		}
	}
	option = {
		name = DEVASTATING
	}
}
